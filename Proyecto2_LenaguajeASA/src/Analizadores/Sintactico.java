
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 17 09:32:20 CST 2019
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 17 09:32:20 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\004\000\002\007\006\000\002\010\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\043\004\000\002\043" +
    "\003\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\004\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\045\004" +
    "\000\002\045\003\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\004\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\015\005\000\002\015\003\000\002\013" +
    "\004\000\002\013\006\000\002\014\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\012" +
    "\011\000\002\022\005\000\002\023\004\000\002\030\004" +
    "\000\002\031\004\000\002\021\012\000\002\021\011\000" +
    "\002\020\012\000\002\020\011\000\002\024\005\000\002" +
    "\024\003\000\002\025\004\000\002\026\005\000\002\026" +
    "\003\000\002\027\006\000\002\027\005\000\002\032\005" +
    "\000\002\032\003\000\002\033\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\006\000\002\041\006\000\002" +
    "\042\003\000\002\042\003\000\002\034\006\000\002\035" +
    "\006\000\002\036\006\000\002\037\005\000\002\047\011" +
    "\000\002\047\015\000\002\050\011\000\002\050\014\000" +
    "\002\054\004\000\002\054\003\000\002\055\006\000\002" +
    "\051\015\000\002\052\011\000\002\053\011\000\002\056" +
    "\011\000\002\056\015\000\002\057\011\000\002\057\014" +
    "\000\002\063\004\000\002\063\003\000\002\064\006\000" +
    "\002\060\015\000\002\061\011\000\002\062\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\022\004\025\005\016\006\015\007\012\010" +
    "\006\011\022\012\021\072\004\001\002\000\004\050\241" +
    "\001\002\000\004\063\u013f\001\002\000\004\072\uffcf\001" +
    "\002\000\004\063\u013e\001\002\000\024\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\072" +
    "\ufffa\001\002\000\024\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\072\ufff4\001\002\000" +
    "\004\072\uffd0\001\002\000\004\072\343\001\002\000\024" +
    "\002\000\004\025\005\016\006\015\007\012\010\006\011" +
    "\022\012\021\072\004\001\002\000\004\072\uffd1\001\002" +
    "\000\004\071\341\001\002\000\024\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\072\ufff6" +
    "\001\002\000\004\063\340\001\002\000\006\034\036\072" +
    "\035\001\002\000\004\072\uffce\001\002\000\024\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\072\ufff7\001\002\000\004\063\034\001\002\000\004" +
    "\072\031\001\002\000\004\002\030\001\002\000\024\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\072\ufff5\001\002\000\004\002\001\001\002\000" +
    "\004\066\032\001\002\000\004\067\033\001\002\000\004" +
    "\063\ufffd\001\002\000\024\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\072\uffff\001\002" +
    "\000\004\057\321\001\002\000\004\057\037\001\002\000" +
    "\004\060\040\001\002\000\004\061\041\001\002\000\044" +
    "\006\015\007\012\010\006\011\022\013\065\014\077\016" +
    "\047\021\073\022\100\023\050\024\076\025\063\026\053" +
    "\027\045\030\051\031\052\072\062\001\002\000\046\006" +
    "\015\007\012\010\006\011\022\013\065\014\077\016\047" +
    "\021\073\022\100\023\050\024\076\025\063\026\053\027" +
    "\045\030\051\031\052\062\320\072\062\001\002\000\004" +
    "\072\312\001\002\000\046\035\uffa4\036\uffa4\040\uffa4\042" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\063\uffa4\065" +
    "\uffa4\066\uffa4\001\002\000\004\057\307\001\002\000\004" +
    "\063\306\001\002\000\004\057\264\001\002\000\004\057" +
    "\256\001\002\000\004\057\253\001\002\000\004\057\251" +
    "\001\002\000\004\057\246\001\002\000\004\063\245\001" +
    "\002\000\004\063\244\001\002\000\052\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\062\uffe7\072\uffe7\001\002\000" +
    "\052\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\062\uffed" +
    "\072\uffed\001\002\000\004\063\243\001\002\000\052\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\062\uffe6\072\uffe6" +
    "\001\002\000\006\050\241\057\157\001\002\000\004\063" +
    "\240\001\002\000\004\063\237\001\002\000\004\063\236" +
    "\001\002\000\052\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\062\uffeb\072\uffeb\001\002\000\052\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\062\ufff2\072\ufff2\001\002\000" +
    "\052\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\062\uffea" +
    "\072\uffea\001\002\000\004\063\235\001\002\000\052\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\062\uffe8\072\uffe8" +
    "\001\002\000\004\057\211\001\002\000\052\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\013\uffec\014\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\062\uffec\072\uffec\001\002" +
    "\000\006\063\210\066\167\001\002\000\004\063\207\001" +
    "\002\000\004\057\175\001\002\000\004\057\102\001\002" +
    "\000\052\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\062" +
    "\uffee\072\uffee\001\002\000\022\032\103\033\107\037\104" +
    "\042\111\057\105\070\114\071\112\072\110\001\002\000" +
    "\044\035\uffb5\036\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\060\uffb5\063\uffb5\065\uffb5\001\002\000\022" +
    "\032\103\033\107\037\104\042\111\057\105\070\114\071" +
    "\112\072\110\001\002\000\022\032\103\033\107\037\104" +
    "\042\111\057\105\070\114\071\112\072\110\001\002\000" +
    "\046\035\uffb2\036\uffb2\040\uffb2\042\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\060\uffb2\063\uffb2\065\uffb2\066\167\001\002" +
    "\000\044\035\uffb4\036\uffb4\040\uffb4\042\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\060\uffb4\063\uffb4\065\uffb4\001\002\000" +
    "\046\035\uffb3\036\uffb3\040\uffb3\042\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\157\060\uffb3\063\uffb3\065\uffb3\001\002" +
    "\000\022\032\103\033\107\037\104\042\111\057\105\070" +
    "\114\071\112\072\110\001\002\000\044\035\uffb7\036\uffb7" +
    "\040\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7" +
    "\063\uffb7\065\uffb7\001\002\000\040\035\127\036\123\040" +
    "\133\042\122\044\130\045\117\046\116\047\121\051\126" +
    "\052\120\053\132\054\125\055\124\056\115\060\131\001" +
    "\002\000\044\035\uffb8\036\uffb8\040\uffb8\042\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\060\uffb8\063\uffb8\065\uffb8\001\002" +
    "\000\022\032\103\033\107\037\104\042\111\057\105\070" +
    "\114\071\112\072\110\001\002\000\022\032\103\033\107" +
    "\037\104\042\111\057\105\070\114\071\112\072\110\001" +
    "\002\000\022\032\103\033\107\037\104\042\111\057\105" +
    "\070\114\071\112\072\110\001\002\000\022\032\103\033" +
    "\107\037\104\042\111\057\105\070\114\071\112\072\110" +
    "\001\002\000\022\032\103\033\107\037\104\042\111\057" +
    "\105\070\114\071\112\072\110\001\002\000\022\032\103" +
    "\033\107\037\104\042\111\057\105\070\114\071\112\072" +
    "\110\001\002\000\022\032\103\033\107\037\104\042\111" +
    "\057\105\070\114\071\112\072\110\001\002\000\022\032" +
    "\103\033\107\037\104\042\111\057\105\070\114\071\112" +
    "\072\110\001\002\000\022\032\103\033\107\037\104\042" +
    "\111\057\105\070\114\071\112\072\110\001\002\000\022" +
    "\032\103\033\107\037\104\042\111\057\105\070\114\071" +
    "\112\072\110\001\002\000\022\032\103\033\107\037\104" +
    "\042\111\057\105\070\114\071\112\072\110\001\002\000" +
    "\022\032\103\033\107\037\104\042\111\057\105\070\114" +
    "\071\112\072\110\001\002\000\004\061\136\001\002\000" +
    "\022\032\103\033\107\037\104\042\111\057\105\070\114" +
    "\071\112\072\110\001\002\000\022\032\103\033\107\037" +
    "\104\042\111\057\105\070\114\071\112\072\110\001\002" +
    "\000\044\035\127\036\123\040\uffc8\042\uffc8\044\130\045" +
    "\117\046\116\047\121\051\126\052\120\053\132\054\125" +
    "\055\124\056\115\060\uffc8\063\uffc8\065\uffc8\001\002\000" +
    "\030\035\127\036\123\040\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\060\uffbb\063\uffbb\065\uffbb\001\002\000" +
    "\044\006\015\007\012\010\006\011\022\013\065\014\077" +
    "\016\047\021\073\022\100\023\050\024\076\025\063\026" +
    "\053\027\045\030\051\031\052\072\062\001\002\000\046" +
    "\006\015\007\012\010\006\011\022\013\065\014\077\016" +
    "\047\021\073\022\100\023\050\024\076\025\063\026\053" +
    "\027\045\030\051\031\052\062\140\072\062\001\002\000" +
    "\052\006\uff8c\007\uff8c\010\uff8c\011\uff8c\013\uff8c\014\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\062\uff8c" +
    "\072\uff8c\001\002\000\052\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\062\ufff3\072\ufff3\001\002\000\044\035\127" +
    "\036\123\040\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\121\051\126\052\120\053\132\054\125\055\124\056\115" +
    "\060\uffc6\063\uffc6\065\uffc6\001\002\000\044\035\uffc2\036" +
    "\123\040\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\060" +
    "\uffc2\063\uffc2\065\uffc2\001\002\000\030\035\127\036\123" +
    "\040\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\060" +
    "\uffbf\063\uffbf\065\uffbf\001\002\000\030\035\127\036\123" +
    "\040\uffba\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\060" +
    "\uffba\063\uffba\065\uffba\001\002\000\030\035\127\036\123" +
    "\040\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\060" +
    "\uffbd\063\uffbd\065\uffbd\001\002\000\044\035\uffc1\036\uffc1" +
    "\040\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1" +
    "\063\uffc1\065\uffc1\001\002\000\044\035\127\036\123\040" +
    "\uffc7\042\uffc7\044\130\045\117\046\116\047\121\051\126" +
    "\052\120\053\132\054\125\055\124\056\115\060\uffc7\063" +
    "\uffc7\065\uffc7\001\002\000\044\035\127\036\123\040\uffc3" +
    "\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\126\052" +
    "\120\053\132\054\125\055\124\056\115\060\uffc3\063\uffc3" +
    "\065\uffc3\001\002\000\030\035\127\036\123\040\uffbe\042" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\060\uffbe\063\uffbe" +
    "\065\uffbe\001\002\000\044\035\127\036\123\040\uffc5\042" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\121\051\126\052\120" +
    "\053\132\054\125\055\124\056\115\060\uffc5\063\uffc5\065" +
    "\uffc5\001\002\000\044\035\127\036\123\040\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\121\051\126\052\120\053" +
    "\132\054\125\055\124\056\115\060\uffc4\063\uffc4\065\uffc4" +
    "\001\002\000\030\035\127\036\123\040\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\060\uffbc\063\uffbc\065\uffbc" +
    "\001\002\000\044\035\127\036\123\040\uffb6\042\uffb6\044" +
    "\130\045\117\046\116\047\121\051\126\052\120\053\132" +
    "\054\125\055\124\056\115\060\uffb6\063\uffb6\065\uffb6\001" +
    "\002\000\024\032\103\033\107\037\104\042\111\057\105" +
    "\060\162\070\114\071\112\072\110\001\002\000\006\060" +
    "\uffa0\065\uffa0\001\002\000\006\060\164\065\165\001\002" +
    "\000\046\035\uffa2\036\uffa2\040\uffa2\042\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\060\uffa2\063\uffa2\065\uffa2\066\uffa2\001" +
    "\002\000\042\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\uff9f\065\uff9f\001\002\000\046" +
    "\035\uffa3\036\uffa3\040\uffa3\042\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\060\uffa3\063\uffa3\065\uffa3\066\uffa3\001\002\000" +
    "\022\032\103\033\107\037\104\042\111\057\105\070\114" +
    "\071\112\072\110\001\002\000\006\060\uffa1\065\uffa1\001" +
    "\002\000\004\072\170\001\002\000\004\057\157\001\002" +
    "\000\046\035\uffa5\036\uffa5\040\uffa5\042\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\060\uffa5\063\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\040\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\173\001\002\000\044\035\uffb9" +
    "\036\uffb9\040\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\060\uffb9\063\uffb9\065\uffb9\001\002\000\044\035\uffc0\036" +
    "\uffc0\040\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060" +
    "\uffc0\063\uffc0\065\uffc0\001\002\000\022\032\103\033\107" +
    "\037\104\042\111\057\105\070\114\071\112\072\110\001" +
    "\002\000\040\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\177\001\002\000\004\061\200" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\065\014\077\016\047\021\073\022\100\023\050\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\046\006\015\007\012\010\006\011\022\013\065" +
    "\014\077\016\047\021\073\022\100\023\050\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\062\202\072\062" +
    "\001\002\000\054\006\uff94\007\uff94\010\uff94\011\uff94\013" +
    "\uff94\014\uff94\015\203\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\062\uff94\072\uff94\001\002\000\004\061\204" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\065\014\077\016\047\021\073\022\100\023\050\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\046\006\015\007\012\010\006\011\022\013\065" +
    "\014\077\016\047\021\073\022\100\023\050\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\062\206\072\062" +
    "\001\002\000\052\006\uff93\007\uff93\010\uff93\011\uff93\013" +
    "\uff93\014\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\062\uff93\072\uff93\001\002\000\052\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\013\uffae\014\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\062\uffae\072\uffae\001\002\000" +
    "\052\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\062\uffef" +
    "\072\uffef\001\002\000\006\006\212\011\213\001\002\000" +
    "\004\072\232\001\002\000\004\072\227\001\002\000\004" +
    "\063\215\001\002\000\022\032\103\033\107\037\104\042" +
    "\111\057\105\070\114\071\112\072\110\001\002\000\040" +
    "\035\127\036\123\040\133\042\122\044\130\045\117\046" +
    "\116\047\121\051\126\052\120\053\132\054\125\055\124" +
    "\056\115\063\217\001\002\000\006\041\220\043\222\001" +
    "\002\000\004\060\uff9a\001\002\000\004\060\223\001\002" +
    "\000\004\060\uff99\001\002\000\004\061\224\001\002\000" +
    "\044\006\015\007\012\010\006\011\022\013\065\014\077" +
    "\016\047\021\073\022\100\023\050\024\076\025\063\026" +
    "\053\027\045\030\051\031\052\072\062\001\002\000\046" +
    "\006\015\007\012\010\006\011\022\013\065\014\077\016" +
    "\047\021\073\022\100\023\050\024\076\025\063\026\053" +
    "\027\045\030\051\031\052\062\226\072\062\001\002\000" +
    "\052\006\uff8d\007\uff8d\010\uff8d\011\uff8d\013\uff8d\014\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\062\uff8d" +
    "\072\uff8d\001\002\000\004\050\230\001\002\000\022\032" +
    "\103\033\107\037\104\042\111\057\105\070\114\071\112" +
    "\072\110\001\002\000\040\035\127\036\123\040\133\042" +
    "\122\044\130\045\117\046\116\047\121\051\126\052\120" +
    "\053\132\054\125\055\124\056\115\063\uff9c\001\002\000" +
    "\004\050\233\001\002\000\022\032\103\033\107\037\104" +
    "\042\111\057\105\070\114\071\112\072\110\001\002\000" +
    "\040\035\127\036\123\040\133\042\122\044\130\045\117" +
    "\046\116\047\121\051\126\052\120\053\132\054\125\055" +
    "\124\056\115\063\uff9b\001\002\000\052\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\062\ufff1\072\ufff1\001\002\000" +
    "\052\006\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\062\uffaf" +
    "\072\uffaf\001\002\000\052\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\062\ufff0\072\ufff0\001\002\000\052\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\013\uffad\014\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\062\uffad\072\uffad\001" +
    "\002\000\022\032\103\033\107\037\104\042\111\057\105" +
    "\070\114\071\112\072\110\001\002\000\040\035\127\036" +
    "\123\040\133\042\122\044\130\045\117\046\116\047\121" +
    "\051\126\052\120\053\132\054\125\055\124\056\115\063" +
    "\uffc9\001\002\000\052\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\062\uffe5\072\uffe5\001\002\000\052\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\062\uffe3\072\uffe3\001\002" +
    "\000\052\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\062" +
    "\uffe4\072\uffe4\001\002\000\022\032\103\033\107\037\104" +
    "\042\111\057\105\070\114\071\112\072\110\001\002\000" +
    "\040\035\127\036\123\040\133\042\122\044\130\045\117" +
    "\046\116\047\121\051\126\052\120\053\132\054\125\055" +
    "\124\056\115\060\250\001\002\000\004\063\uff98\001\002" +
    "\000\004\060\252\001\002\000\004\063\uff95\001\002\000" +
    "\022\032\103\033\107\037\104\042\111\057\105\070\114" +
    "\071\112\072\110\001\002\000\040\035\127\036\123\040" +
    "\133\042\122\044\130\045\117\046\116\047\121\051\126" +
    "\052\120\053\132\054\125\055\124\056\115\060\255\001" +
    "\002\000\004\063\uff96\001\002\000\022\032\103\033\107" +
    "\037\104\042\111\057\105\070\114\071\112\072\110\001" +
    "\002\000\040\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\260\001\002\000\004\061\261" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\065\014\077\016\047\021\073\022\100\023\050\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\046\006\015\007\012\010\006\011\022\013\065" +
    "\014\077\016\047\021\073\022\100\023\050\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\062\263\072\062" +
    "\001\002\000\052\006\uff8b\007\uff8b\010\uff8b\011\uff8b\013" +
    "\uff8b\014\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\062\uff8b\072\uff8b\001\002\000\022\032\103\033\107" +
    "\037\104\042\111\057\105\070\114\071\112\072\110\001" +
    "\002\000\040\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\266\001\002\000\004\061\267" +
    "\001\002\000\004\020\272\001\002\000\010\017\uff8f\020" +
    "\uff8f\062\uff8f\001\002\000\010\017\300\020\272\062\301" +
    "\001\002\000\006\070\273\071\274\001\002\000\004\064" +
    "\uff9e\001\002\000\004\064\uff9d\001\002\000\004\064\276" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\065\014\077\016\047\021\073\022\100\023\050\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\052\006\015\007\012\010\006\011\022\013\065" +
    "\014\077\016\047\017\uff8e\020\uff8e\021\073\022\100\023" +
    "\050\024\076\025\063\026\053\027\045\030\051\031\052" +
    "\062\uff8e\072\062\001\002\000\004\064\303\001\002\000" +
    "\052\006\uff92\007\uff92\010\uff92\011\uff92\013\uff92\014\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\062\uff92" +
    "\072\uff92\001\002\000\010\017\uff90\020\uff90\062\uff90\001" +
    "\002\000\044\006\015\007\012\010\006\011\022\013\065" +
    "\014\077\016\047\021\073\022\100\023\050\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\072\062\001\002" +
    "\000\046\006\015\007\012\010\006\011\022\013\065\014" +
    "\077\016\047\021\073\022\100\023\050\024\076\025\063" +
    "\026\053\027\045\030\051\031\052\062\305\072\062\001" +
    "\002\000\052\006\uff91\007\uff91\010\uff91\011\uff91\013\uff91" +
    "\014\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\062\uff91\072\uff91\001\002\000\052\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\062\uffe9\072\uffe9\001\002\000\004" +
    "\072\310\001\002\000\004\060\311\001\002\000\004\063" +
    "\uff97\001\002\000\010\050\uffcc\063\uffcc\065\uffcc\001\002" +
    "\000\010\050\315\063\uffcb\065\314\001\002\000\004\072" +
    "\317\001\002\000\022\032\103\033\107\037\104\042\111" +
    "\057\105\070\114\071\112\072\110\001\002\000\040\035" +
    "\127\036\123\040\133\042\122\044\130\045\117\046\116" +
    "\047\121\051\126\052\120\053\132\054\125\055\124\056" +
    "\115\063\uffca\001\002\000\010\050\uffcd\063\uffcd\065\uffcd" +
    "\001\002\000\024\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\072\uffb1\001\002\000\014" +
    "\006\015\007\012\010\006\011\022\060\323\001\002\000" +
    "\006\060\uffa7\065\uffa7\001\002\000\004\061\335\001\002" +
    "\000\006\060\327\065\330\001\002\000\004\072\326\001" +
    "\002\000\006\060\uffa6\065\uffa6\001\002\000\004\061\332" +
    "\001\002\000\012\006\015\007\012\010\006\011\022\001" +
    "\002\000\006\060\uffa8\065\uffa8\001\002\000\044\006\015" +
    "\007\012\010\006\011\022\013\065\014\077\016\047\021" +
    "\073\022\100\023\050\024\076\025\063\026\053\027\045" +
    "\030\051\031\052\072\062\001\002\000\046\006\015\007" +
    "\012\010\006\011\022\013\065\014\077\016\047\021\073" +
    "\022\100\023\050\024\076\025\063\026\053\027\045\030" +
    "\051\031\052\062\334\072\062\001\002\000\024\002\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\072\uffaa\001\002\000\044\006\015\007\012\010\006" +
    "\011\022\013\065\014\077\016\047\021\073\022\100\023" +
    "\050\024\076\025\063\026\053\027\045\030\051\031\052" +
    "\072\062\001\002\000\046\006\015\007\012\010\006\011" +
    "\022\013\065\014\077\016\047\021\073\022\100\023\050" +
    "\024\076\025\063\026\053\027\045\030\051\031\052\062" +
    "\337\072\062\001\002\000\024\002\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\072\uffa9\001" +
    "\002\000\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\072\ufff8\001\002\000\004\063" +
    "\ufffc\001\002\000\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\072\ufffb\001\002\000" +
    "\012\050\uffcc\057\344\063\uffcc\065\uffcc\001\002\000\014" +
    "\006\015\007\012\010\006\011\022\060\345\001\002\000" +
    "\004\061\u013b\001\002\000\006\060\347\065\330\001\002" +
    "\000\004\061\350\001\002\000\044\006\015\007\012\010" +
    "\006\011\022\013\365\014\376\016\353\021\370\022\377" +
    "\023\355\024\076\025\063\026\053\027\045\030\051\031" +
    "\052\072\062\001\002\000\052\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\062\uffdd\072\uffdd\001\002\000\004\063" +
    "\u013a\001\002\000\004\057\u012a\001\002\000\052\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\062\uffda\072\uffda\001" +
    "\002\000\004\057\u0124\001\002\000\004\063\u0123\001\002" +
    "\000\004\063\u0122\001\002\000\046\006\015\007\012\010" +
    "\006\011\022\013\365\014\376\016\353\021\370\022\377" +
    "\023\355\024\076\025\063\026\053\027\045\030\051\031" +
    "\052\062\u0121\072\062\001\002\000\052\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\062\uffd6\072\uffd6\001\002\000" +
    "\004\063\u0120\001\002\000\052\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\062\uffe1\072\uffe1\001\002\000\004\063" +
    "\u011f\001\002\000\022\032\103\033\107\037\104\042\111" +
    "\057\105\070\114\071\112\072\110\001\002\000\004\063" +
    "\u011c\001\002\000\052\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\062\uffd7\072\uffd7\001\002\000\004\057\u0112\001" +
    "\002\000\052\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\062\uffdb\072\uffdb\001\002\000\052\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\062\uffd9\072\uffd9\001\002\000\006" +
    "\063\u0111\066\167\001\002\000\052\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\062\uffdc\072\uffdc\001\002\000\052" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\062\uffd5\072" +
    "\uffd5\001\002\000\004\057\u0107\001\002\000\004\057\u0100" +
    "\001\002\000\022\032\103\033\107\037\104\042\111\057" +
    "\105\070\114\071\112\072\110\001\002\000\040\035\127" +
    "\036\123\040\133\042\122\044\130\045\117\046\116\047" +
    "\121\051\126\052\120\053\132\054\125\055\124\056\115" +
    "\060\u0102\001\002\000\004\061\u0103\001\002\000\044\006" +
    "\015\007\012\010\006\011\022\013\365\014\376\016\353" +
    "\021\370\022\377\023\355\024\076\025\063\026\053\027" +
    "\045\030\051\031\052\072\062\001\002\000\046\006\015" +
    "\007\012\010\006\011\022\013\365\014\376\016\353\021" +
    "\370\022\377\023\355\024\076\025\063\026\053\027\045" +
    "\030\051\031\052\062\u0105\072\062\001\002\000\052\006" +
    "\uff82\007\uff82\010\uff82\011\uff82\013\uff82\014\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\062\uff82\072\uff82" +
    "\001\002\000\052\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\062\uffe2\072\uffe2\001\002\000\022\032\103\033\107" +
    "\037\104\042\111\057\105\070\114\071\112\072\110\001" +
    "\002\000\040\035\127\036\123\040\133\042\122\044\130" +
    "\045\117\046\116\047\121\051\126\052\120\053\132\054" +
    "\125\055\124\056\115\060\u0109\001\002\000\004\061\u010a" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\365\014\376\016\353\021\370\022\377\023\355\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\046\006\015\007\012\010\006\011\022\013\365" +
    "\014\376\016\353\021\370\022\377\023\355\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\062\u010c\072\062" +
    "\001\002\000\054\006\uff8a\007\uff8a\010\uff8a\011\uff8a\013" +
    "\uff8a\014\uff8a\015\u010d\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\062\uff8a\072\uff8a\001\002\000\004\061\u010e" +
    "\001\002\000\044\006\015\007\012\010\006\011\022\013" +
    "\365\014\376\016\353\021\370\022\377\023\355\024\076" +
    "\025\063\026\053\027\045\030\051\031\052\072\062\001" +
    "\002\000\046\006\015\007\012\010\006\011\022\013\365" +
    "\014\376\016\353\021\370\022\377\023\355\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\062\u0110\072\062" +
    "\001\002\000\052\006\uff89\007\uff89\010\uff89\011\uff89\013" +
    "\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\062\uff89\072\uff89\001\002\000\052\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\062\uffde\072\uffde\001\002\000" +
    "\006\006\212\011\213\001\002\000\004\063\u0114\001\002" +
    "\000\022\032\103\033\107\037\104\042\111\057\105\070" +
    "\114\071\112\072\110\001\002\000\040\035\127\036\123" +
    "\040\133\042\122\044\130\045\117\046\116\047\121\051" +
    "\126\052\120\053\132\054\125\055\124\056\115\063\u0116" +
    "\001\002\000\006\041\220\043\222\001\002\000\004\060" +
    "\u0118\001\002\000\004\061\u0119\001\002\000\044\006\015" +
    "\007\012\010\006\011\022\013\365\014\376\016\353\021" +
    "\370\022\377\023\355\024\076\025\063\026\053\027\045" +
    "\030\051\031\052\072\062\001\002\000\046\006\015\007" +
    "\012\010\006\011\022\013\365\014\376\016\353\021\370" +
    "\022\377\023\355\024\076\025\063\026\053\027\045\030" +
    "\051\031\052\062\u011b\072\062\001\002\000\052\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\013\uff83\014\uff83\016\uff83\017" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\062\uff83\072\uff83\001" +
    "\002\000\052\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\062\uffe0\072\uffe0\001\002\000\040\035\127\036\123\040" +
    "\133\042\122\044\130\045\117\046\116\047\121\051\126" +
    "\052\120\053\132\054\125\055\124\056\115\063\u011e\001" +
    "\002\000\052\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\062\uffb0\072\uffb0\001\002\000\052\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\062\uffdf\072\uffdf\001\002\000\052" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\062\uffd4\072" +
    "\uffd4\001\002\000\024\002\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\072\uffac\001\002\000" +
    "\052\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\062\uffd2" +
    "\072\uffd2\001\002\000\052\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\062\uffd3\072\uffd3\001\002\000\022\032\103" +
    "\033\107\037\104\042\111\057\105\070\114\071\112\072" +
    "\110\001\002\000\040\035\127\036\123\040\133\042\122" +
    "\044\130\045\117\046\116\047\121\051\126\052\120\053" +
    "\132\054\125\055\124\056\115\060\u0126\001\002\000\004" +
    "\061\u0127\001\002\000\044\006\015\007\012\010\006\011" +
    "\022\013\365\014\376\016\353\021\370\022\377\023\355" +
    "\024\076\025\063\026\053\027\045\030\051\031\052\072" +
    "\062\001\002\000\046\006\015\007\012\010\006\011\022" +
    "\013\365\014\376\016\353\021\370\022\377\023\355\024" +
    "\076\025\063\026\053\027\045\030\051\031\052\062\u0129" +
    "\072\062\001\002\000\052\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\013\uff81\014\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\062\uff81\072\uff81\001\002\000\022\032\103" +
    "\033\107\037\104\042\111\057\105\070\114\071\112\072" +
    "\110\001\002\000\040\035\127\036\123\040\133\042\122" +
    "\044\130\045\117\046\116\047\121\051\126\052\120\053" +
    "\132\054\125\055\124\056\115\060\u012c\001\002\000\004" +
    "\061\u012d\001\002\000\004\020\u012f\001\002\000\010\017" +
    "\uff85\020\uff85\062\uff85\001\002\000\006\070\273\071\274" +
    "\001\002\000\010\017\u0132\020\u012f\062\u0133\001\002\000" +
    "\010\017\uff86\020\uff86\062\uff86\001\002\000\004\064\u0134" +
    "\001\002\000\052\006\uff88\007\uff88\010\uff88\011\uff88\013" +
    "\uff88\014\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\062\uff88\072\uff88\001\002\000\044\006\015\007\012" +
    "\010\006\011\022\013\365\014\376\016\353\021\370\022" +
    "\377\023\355\024\076\025\063\026\053\027\045\030\051" +
    "\031\052\072\062\001\002\000\046\006\015\007\012\010" +
    "\006\011\022\013\365\014\376\016\353\021\370\022\377" +
    "\023\355\024\076\025\063\026\053\027\045\030\051\031" +
    "\052\062\u0136\072\062\001\002\000\052\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\062\uff87\072\uff87\001\002\000" +
    "\004\064\u0138\001\002\000\044\006\015\007\012\010\006" +
    "\011\022\013\365\014\376\016\353\021\370\022\377\023" +
    "\355\024\076\025\063\026\053\027\045\030\051\031\052" +
    "\072\062\001\002\000\052\006\015\007\012\010\006\011" +
    "\022\013\365\014\376\016\353\017\uff84\020\uff84\021\370" +
    "\022\377\023\355\024\076\025\063\026\053\027\045\030" +
    "\051\031\052\062\uff84\072\062\001\002\000\052\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\062\uffd8\072\uffd8\001" +
    "\002\000\044\006\015\007\012\010\006\011\022\013\365" +
    "\014\376\016\353\021\370\022\377\023\355\024\076\025" +
    "\063\026\053\027\045\030\051\031\052\072\062\001\002" +
    "\000\046\006\015\007\012\010\006\011\022\013\365\014" +
    "\376\016\353\021\370\022\377\023\355\024\076\025\063" +
    "\026\053\027\045\030\051\031\052\062\u013d\072\062\001" +
    "\002\000\024\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\072\uffab\001\002\000\024\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\072\ufff9\001\002\000\024\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\072\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\032\002\025\004\010\005\013\006\007\007" +
    "\023\010\004\011\012\012\022\013\006\014\017\020\016" +
    "\021\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\312\001\001\000" +
    "\026\004\010\006\341\007\023\010\004\011\012\012\022" +
    "\013\006\014\017\020\016\021\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\042\013\070\014\063\023\060\026\074\027\043" +
    "\030\071\031\055\034\045\035\057\036\053\037\054\043" +
    "\041\044\066\047\100\050\056\051\073\052\065\053\067" +
    "\001\001\000\046\011\042\013\070\014\063\023\060\026" +
    "\074\027\043\030\071\031\055\034\045\035\057\036\053" +
    "\037\054\044\140\047\100\050\056\051\073\052\065\053" +
    "\067\001\001\000\004\015\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\112\026\105\027\043\001\001\000\002\001\001" +
    "\000\010\016\173\026\105\027\043\001\001\000\010\016" +
    "\171\026\105\027\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\155\026\105\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\154\026\105\027\043\001\001\000" +
    "\010\016\153\026\105\027\043\001\001\000\010\016\152" +
    "\026\105\027\043\001\001\000\010\016\151\026\105\027" +
    "\043\001\001\000\010\016\150\026\105\027\043\001\001" +
    "\000\010\016\147\026\105\027\043\001\001\000\010\016" +
    "\146\026\105\027\043\001\001\000\010\016\145\026\105" +
    "\027\043\001\001\000\010\016\144\026\105\027\043\001" +
    "\001\000\010\016\143\026\105\027\043\001\001\000\010" +
    "\016\142\026\105\027\043\001\001\000\010\016\141\026" +
    "\105\027\043\001\001\000\002\001\001\000\010\016\134" +
    "\026\105\027\043\001\001\000\010\016\133\026\105\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\042\013\070\014\063\023\060\026\074\027\043\030" +
    "\071\031\055\034\045\035\057\036\053\037\054\043\136" +
    "\044\066\047\100\050\056\051\073\052\065\053\067\001" +
    "\001\000\046\011\042\013\070\014\063\023\060\026\074" +
    "\027\043\030\071\031\055\034\045\035\057\036\053\037" +
    "\054\044\140\047\100\050\056\051\073\052\065\053\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\162\026\105\027\043\032\160\033\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\162\026\105\027\043" +
    "\033\165\001\001\000\002\001\001\000\004\027\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\175\026" +
    "\105\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\042\013\070\014\063\023\060\026\074\027" +
    "\043\030\071\031\055\034\045\035\057\036\053\037\054" +
    "\043\200\044\066\047\100\050\056\051\073\052\065\053" +
    "\067\001\001\000\046\011\042\013\070\014\063\023\060" +
    "\026\074\027\043\030\071\031\055\034\045\035\057\036" +
    "\053\037\054\044\140\047\100\050\056\051\073\052\065" +
    "\053\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\042\013\070\014\063\023\060\026\074\027\043" +
    "\030\071\031\055\034\045\035\057\036\053\037\054\043" +
    "\204\044\066\047\100\050\056\051\073\052\065\053\067" +
    "\001\001\000\046\011\042\013\070\014\063\023\060\026" +
    "\074\027\043\030\071\031\055\034\045\035\057\036\053" +
    "\037\054\044\140\047\100\050\056\051\073\052\065\053" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\215\026\105" +
    "\027\043\001\001\000\002\001\001\000\004\042\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\042\013\070\014\063\023" +
    "\060\026\074\027\043\030\071\031\055\034\045\035\057" +
    "\036\053\037\054\043\224\044\066\047\100\050\056\051" +
    "\073\052\065\053\067\001\001\000\046\011\042\013\070" +
    "\014\063\023\060\026\074\027\043\030\071\031\055\034" +
    "\045\035\057\036\053\037\054\044\140\047\100\050\056" +
    "\051\073\052\065\053\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\230\026\105\027\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\233\026" +
    "\105\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\241\026\105\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\246\026\105\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\253\026\105\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\256\026\105\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\042" +
    "\013\070\014\063\023\060\026\074\027\043\030\071\031" +
    "\055\034\045\035\057\036\053\037\054\043\261\044\066" +
    "\047\100\050\056\051\073\052\065\053\067\001\001\000" +
    "\046\011\042\013\070\014\063\023\060\026\074\027\043" +
    "\030\071\031\055\034\045\035\057\036\053\037\054\044" +
    "\140\047\100\050\056\051\073\052\065\053\067\001\001" +
    "\000\002\001\001\000\010\016\264\026\105\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\054\270" +
    "\055\267\001\001\000\002\001\001\000\004\055\301\001" +
    "\001\000\004\040\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\042\013\070\014" +
    "\063\023\060\026\074\027\043\030\071\031\055\034\045" +
    "\035\057\036\053\037\054\043\276\044\066\047\100\050" +
    "\056\051\073\052\065\053\067\001\001\000\046\011\042" +
    "\013\070\014\063\023\060\026\074\027\043\030\071\031" +
    "\055\034\045\035\057\036\053\037\054\044\140\047\100" +
    "\050\056\051\073\052\065\053\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\042" +
    "\013\070\014\063\023\060\026\074\027\043\030\071\031" +
    "\055\034\045\035\057\036\053\037\054\043\303\044\066" +
    "\047\100\050\056\051\073\052\065\053\067\001\001\000" +
    "\046\011\042\013\070\014\063\023\060\026\074\027\043" +
    "\030\071\031\055\034\045\035\057\036\053\037\054\044" +
    "\140\047\100\050\056\051\073\052\065\053\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\315\026\105\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\324\024\323\025\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\324\025\330\001\001\000\002\001\001\000\050\011\042" +
    "\013\070\014\063\023\060\026\074\027\043\030\071\031" +
    "\055\034\045\035\057\036\053\037\054\043\332\044\066" +
    "\047\100\050\056\051\073\052\065\053\067\001\001\000" +
    "\046\011\042\013\070\014\063\023\060\026\074\027\043" +
    "\030\071\031\055\034\045\035\057\036\053\037\054\044" +
    "\140\047\100\050\056\051\073\052\065\053\067\001\001" +
    "\000\002\001\001\000\050\011\042\013\070\014\063\023" +
    "\060\026\074\027\043\030\071\031\055\034\045\035\057" +
    "\036\053\037\054\043\335\044\066\047\100\050\056\051" +
    "\073\052\065\053\067\001\001\000\046\011\042\013\070" +
    "\014\063\023\060\026\074\027\043\030\071\031\055\034" +
    "\045\035\057\036\053\037\054\044\140\047\100\050\056" +
    "\051\073\052\065\053\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\324\024\345\025\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\042\013\365\014\363\022\374\026\372\027\043\030" +
    "\366\031\360\034\351\035\361\036\355\037\356\045\357" +
    "\046\362\056\350\057\373\060\370\061\353\062\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\042\013\365\014\363\022\374" +
    "\026\372\027\043\030\366\031\360\034\351\035\361\036" +
    "\355\037\356\046\u0105\056\350\057\373\060\370\061\353" +
    "\062\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u011c\026\105" +
    "\027\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\u0100\026\105\027\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\042\013\365\014\363\022\374\026\372\027\043\030\366" +
    "\031\360\034\351\035\361\036\355\037\356\045\u0103\046" +
    "\362\056\350\057\373\060\370\061\353\062\371\001\001" +
    "\000\046\011\042\013\365\014\363\022\374\026\372\027" +
    "\043\030\366\031\360\034\351\035\361\036\355\037\356" +
    "\046\u0105\056\350\057\373\060\370\061\353\062\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u0107" +
    "\026\105\027\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\042\013\365\014\363\022\374\026\372" +
    "\027\043\030\366\031\360\034\351\035\361\036\355\037" +
    "\356\045\u010a\046\362\056\350\057\373\060\370\061\353" +
    "\062\371\001\001\000\046\011\042\013\365\014\363\022" +
    "\374\026\372\027\043\030\366\031\360\034\351\035\361" +
    "\036\355\037\356\046\u0105\056\350\057\373\060\370\061" +
    "\353\062\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\042\013\365\014\363\022\374\026\372\027" +
    "\043\030\366\031\360\034\351\035\361\036\355\037\356" +
    "\045\u010e\046\362\056\350\057\373\060\370\061\353\062" +
    "\371\001\001\000\046\011\042\013\365\014\363\022\374" +
    "\026\372\027\043\030\366\031\360\034\351\035\361\036" +
    "\355\037\356\046\u0105\056\350\057\373\060\370\061\353" +
    "\062\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u0112\001\001\000\002\001\001\000\010\016\u0114" +
    "\026\105\027\043\001\001\000\002\001\001\000\004\042" +
    "\u0116\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\042\013\365\014\363\022\374\026\372\027\043\030" +
    "\366\031\360\034\351\035\361\036\355\037\356\045\u0119" +
    "\046\362\056\350\057\373\060\370\061\353\062\371\001" +
    "\001\000\046\011\042\013\365\014\363\022\374\026\372" +
    "\027\043\030\366\031\360\034\351\035\361\036\355\037" +
    "\356\046\u0105\056\350\057\373\060\370\061\353\062\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\u0124\026\105\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\042\013\365\014\363\022" +
    "\374\026\372\027\043\030\366\031\360\034\351\035\361" +
    "\036\355\037\356\045\u0127\046\362\056\350\057\373\060" +
    "\370\061\353\062\371\001\001\000\046\011\042\013\365" +
    "\014\363\022\374\026\372\027\043\030\366\031\360\034" +
    "\351\035\361\036\355\037\356\046\u0105\056\350\057\373" +
    "\060\370\061\353\062\371\001\001\000\002\001\001\000" +
    "\010\016\u012a\026\105\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\u012f\064\u012d\001\001\000" +
    "\002\001\001\000\004\040\u0136\001\001\000\004\064\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\042\013\365\014\363\022\374\026\372" +
    "\027\043\030\366\031\360\034\351\035\361\036\355\037" +
    "\356\045\u0134\046\362\056\350\057\373\060\370\061\353" +
    "\062\371\001\001\000\046\011\042\013\365\014\363\022" +
    "\374\026\372\027\043\030\366\031\360\034\351\035\361" +
    "\036\355\037\356\046\u0105\056\350\057\373\060\370\061" +
    "\353\062\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\042\013\365\014\363\022\374\026\372\027" +
    "\043\030\366\031\360\034\351\035\361\036\355\037\356" +
    "\045\u0138\046\362\056\350\057\373\060\370\061\353\062" +
    "\371\001\001\000\046\011\042\013\365\014\363\022\374" +
    "\026\372\027\043\030\366\031\360\034\351\035\361\036" +
    "\355\037\356\046\u0105\056\350\057\373\060\370\061\353" +
    "\062\371\001\001\000\002\001\001\000\050\011\042\013" +
    "\365\014\363\022\374\026\372\027\043\030\366\031\360" +
    "\034\351\035\361\036\355\037\356\045\u013b\046\362\056" +
    "\350\057\373\060\370\061\353\062\371\001\001\000\046" +
    "\011\042\013\365\014\363\022\374\026\372\027\043\030" +
    "\366\031\360\034\351\035\361\036\355\037\356\046\u0105" +
    "\056\350\057\373\060\370\061\353\062\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<ErrorT> lista_errores;
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


//public Nodo raiz;

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FMIENTRAS_QUE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FHASTA_QUE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FPARA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FVALOR ::= tokValor TIPODATO tokDosp FSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALOR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FVALORES ::= FVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FVALORES ::= FVALORES FVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 valores.add(valor); RESULT = valores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokNoCumple tokDosp FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla tokEsFalso tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.add(exp);
                    aux.add(sents);
                    //aux.add(new Nodo("ES_FALSO"));
                    aux.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MMIENTRAS_QUE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MHASTA_QUE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MPARA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MVALOR ::= tokValor TIPODATO tokDosp MSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALOR",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MVALORES ::= MVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MVALORES ::= MVALORES MVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 valores.add(valor); RESULT = valores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokNoCumple tokDosp MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla tokEsFalso tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.add(exp);
                    aux.add(sents);
                    //aux.add(new Nodo("ES_FALSO"));
                    aux.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DIBUJAR_TS ::= tokDibujarTS tokApar tokCpar 
            {
              Nodo RESULT =null;
		
                    Nodo aux = new Nodo("DIBUJAR_TS");
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_TS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DIBUJAR_EXP ::= tokDibujarExp tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_EXP");
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_EXP",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DIBUJAR_AST ::= tokDibujarAST tokApar tokId tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_AST");
                    aux.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_AST",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MOSTRAR ::= tokMostrar tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lexp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MOSTRAR");
                    aux.add(lexp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INCRE_DECRE ::= tokMenosMenos 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("--"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INCRE_DECRE ::= tokMasMas 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("++"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIG_PARA ::= tokDecimal tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIG_PARA");
                    aux.add(new Nodo("DECIMAL"));
                    aux.add(new Nodo(id));
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIG_PARA ::= tokEntero tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIG_PARA");
                    aux.add(new Nodo("ENTERO"));
                    aux.add(new Nodo(id));
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPODATO ::= tokString 
            {
              Nodo RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String cad=string;
                    string=string.replaceAll("\"","");
                    RESULT = new Nodo(string);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPODATO ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nodo(num); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROIN ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROIN");
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROSIN ::= PARAMETROIN 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROSIN");
                    aux.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROSIN ::= PARAMETROSIN tokComa PARAMETROIN 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 pars.add(par); RESULT = pars; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAMAR ::= tokId tokApar tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo aux = new Nodo("LLAMAR");
                    aux.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLAMAR ::= tokId tokApar PARAMETROSIN tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parinleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parinright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo parin = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("LLAMAR");
                    aux.add(new Nodo(id));
                    aux.add(parin);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAMADA ::= LLAMAR 
            {
              Nodo RESULT =null;
		int llamarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LLAMADA");
                    aux.add(llamar);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAMADA ::= LLAMADA tokPunto LLAMAR 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int llamarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 llamada.add(llamar); RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETRO ::= TIPO tokId 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("PARAMETRO");
                    aux.add(tipo);
                    aux.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS ::= PARAMETRO 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROS");
                    aux.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= PARAMETROS tokComa PARAMETRO 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 pars.add(par); RESULT = pars; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // METODO ::= tokVacio tokId tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    aux.add(new Nodo("VACIO"));
                    aux.add(new Nodo(id));
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // METODO ::= tokVacio tokId tokApar PARAMETROS tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    aux.add(new Nodo("VACIO"));
                    aux.add(new Nodo(id));
                    aux.add(par);
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION ::= TIPO tokId tokApar tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    aux.add(tipo);
                    aux.add(new Nodo(id));
                    aux.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= TIPO tokId tokApar PARAMETROS tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    aux.add(tipo);
                    aux.add(new Nodo(id));
                    aux.add(par);
                    aux.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTINUAR ::= tokContinuar tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("CONTINUAR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ROMPER ::= tokRomper tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("ROMPER"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ROMPER",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MRETORNO ::= tokRetorno tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("RETORNO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MRETORNO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FRETORNO ::= tokRetorno EXP tokPcoma 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("RETORNO");
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FRETORNO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRINCIPAL ::= tokVacio tokPrincipal tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux=new Nodo("PRINCIPAL");
                    aux.add(new Nodo("VACIO"));
                    aux.add(new Nodo("PRINCIPAL"));
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= LLAMADA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("ID"); aux.add(new Nodo(id)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= tokFalso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); Nodo tok=new Nodo("TOKFALSO"); tok.add(new Nodo(falso)); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= tokVerdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); Nodo tok=new Nodo("TOKVERDADERO"); tok.add(new Nodo(verdadero)); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(new Nodo("-")); aux.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= tokString 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String aux=cadena; aux=aux.replaceAll("\"",""); RESULT = new Nodo(aux); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); Nodo tok=new Nodo("TOKNUMERO"); tok.add(new Nodo(num)); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP tokMenor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("<")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP tokMayor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo(">")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP tokMenorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("<=")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP tokMayorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo(">=")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP tokDiferente EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("!=")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP tokIgualIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("==")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= tokNot EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(new Nodo("!")); aux.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP tokAnd EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("&&")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP tokOr EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("||")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP tokPotencia EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("^")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP tokModulo EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("%")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP tokDiv EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("/")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP tokPor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("*")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("-")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP tokMas EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(a); aux.add(new Nodo("+")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIGNACION");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= TIPO LID tokIgual EXP 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    exp.columna=expleft+1;
                    exp.linea=expright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    aux.add(exp);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= TIPO LID 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LID ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LISTA ID");
                    Nodo aux2= new Nodo(id);
                    aux2.columna=idleft +1;
                    aux2.linea=idright +1;
                    aux.add(aux2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LID ::= LID tokComa tokId 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 lid.columna=lidleft+1; lid.linea=lidright+1;
                    Nodo aux=new Nodo(id);
                    aux.columna=idleft+1;
                    aux.linea=idright+1;
                    lid.add(aux); 
                    RESULT = lid; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= tokEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("ENTERO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= tokTexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("TEXTO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= tokBooleano 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("BOOLEANO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= tokDecimal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("DECIMAL"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FSENT ::= FRETORNO 
            {
              Nodo RESULT =null;
		int fretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FSENT ::= FMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FSENT ::= FHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FSENT ::= FPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FSENT ::= FCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FSENT ::= FES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FSENT ::= LLAMADA tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FSENTS ::= FSENT 
            {
              Nodo RESULT =null;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("SENTS");
                    aux.add(fsent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FSENTS ::= FSENTS FSENT 
            {
              Nodo RESULT =null;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 fsents.add(fsent); RESULT = fsents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MSENT ::= MRETORNO 
            {
              Nodo RESULT =null;
		int mretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MSENT ::= MMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MSENT ::= MHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MSENT ::= MPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MSENT ::= MCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MSENT ::= MES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MSENT ::= LLAMADA tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MSENTS ::= MSENT 
            {
              Nodo RESULT =null;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("SENTS");
                    aux.add(msent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MSENTS ::= MSENTS MSENT 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 msents.add(msent); RESULT = msents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= ENCABEZADO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= FUNCION 
            {
              Nodo RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= METODO 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = metodo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= PRINCIPAL 
            {
              Nodo RESULT =null;
		int princileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int princiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo princi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = princi; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTS ::= SENT 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("SENTS");
                    aux.add(sent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTS ::= SENTS SENT 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 sents.add(sent); RESULT = sents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINIR ::= tokDefinir tokString 
            {
              Nodo RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String ruta="";
                    ruta=dir;
                    ruta=ruta.replaceAll("\"",""); 
                    RESULT = new Nodo(ruta); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFINIR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTAR ::= tokImportar tokId tokPunto tokExtension 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    String archivo=" ";
                    archivo=id+".asa";    
                    RESULT = new Nodo(archivo); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADO ::= DEFINIR tokPcoma 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("DEFINIR");
                    aux.add(def);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADO ::= IMPORTAR tokPcoma 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo imp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("IMPORTAR");
                    aux.add(imp);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTS 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		this.parser.raiz=sents;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

