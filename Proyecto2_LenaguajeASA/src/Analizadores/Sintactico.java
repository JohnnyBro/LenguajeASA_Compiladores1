
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 12 02:21:11 CST 2019
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 12 02:21:11 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\007\006\000\002\010\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\052\004" +
    "\000\002\052\003\000\002\053\004\000\002\053\004\000" +
    "\002\053\004\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\004\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\004\000\002\053\004\000\002\054\004\000\002" +
    "\054\003\000\002\055\004\000\002\055\004\000\002\055" +
    "\004\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\004\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\015\005\000\002\015\003\000\002\013\004\000\002" +
    "\013\006\000\002\014\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\012\011\000\002\022\005\000\002\023\004\000\002\030" +
    "\004\000\002\031\004\000\002\021\012\000\002\021\011" +
    "\000\002\020\012\000\002\020\011\000\002\024\005\000" +
    "\002\024\003\000\002\025\004\000\002\026\005\000\002" +
    "\026\003\000\002\027\006\000\002\027\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\040\011" +
    "\000\002\040\015\000\002\041\011\000\002\041\014\000" +
    "\002\042\004\000\002\042\003\000\002\043\006\000\002" +
    "\044\003\000\002\044\003\000\002\045\015\000\002\046" +
    "\006\000\002\046\006\000\002\047\003\000\002\047\003" +
    "\000\002\050\011\000\002\051\011\000\002\034\006\000" +
    "\002\017\005\000\002\017\003\000\002\035\006\000\002" +
    "\036\006\000\002\037\005\000\002\056\011\000\002\056" +
    "\015\000\002\057\011\000\002\057\014\000\002\063\004" +
    "\000\002\063\003\000\002\064\006\000\002\060\015\000" +
    "\002\061\011\000\002\062\011\000\002\065\011\000\002" +
    "\065\015\000\002\066\011\000\002\066\014\000\002\072" +
    "\004\000\002\072\003\000\002\073\006\000\002\067\015" +
    "\000\002\070\011\000\002\071\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\006\004\010\005\005\001\002\000\004\064" +
    "\u0196\001\002\000\004\072\u0195\001\002\000\056\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\074\ufffe\001\002\000\056\003\047\004\010\005\005" +
    "\006\055\007\053\010\024\011\045\012\022\013\072\014" +
    "\056\015\071\017\031\022\062\023\073\024\034\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\074\051\001" +
    "\002\000\004\074\015\001\002\000\004\064\014\001\002" +
    "\000\004\002\013\001\002\000\004\002\001\001\002\000" +
    "\056\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\074\ufffd\001\002\000\004\067\016\001" +
    "\002\000\004\070\017\001\002\000\004\064\ufffb\001\002" +
    "\000\062\002\ufff2\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\063\ufff2\074\ufff2\001\002" +
    "\000\004\074\u0139\001\002\000\004\074\uffb8\001\002\000" +
    "\044\036\uff8d\037\uff8d\041\uff8d\043\uff8d\045\uff8d\046\uff8d" +
    "\050\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\061\uff8d\064\uff8d\066\uff8d\067\uff8d\001\002\000\004" +
    "\074\uffba\001\002\000\004\060\u0136\001\002\000\004\064" +
    "\u0135\001\002\000\062\002\ufff3\003\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\063\ufff3\074" +
    "\ufff3\001\002\000\062\002\ufff4\003\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\063\ufff4\074" +
    "\ufff4\001\002\000\004\060\u0125\001\002\000\062\002\ufff5" +
    "\003\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\063\ufff5\074\ufff5\001\002\000\054\002\000" +
    "\003\047\006\055\007\053\010\024\011\045\012\022\013" +
    "\072\014\056\015\071\017\031\022\062\023\073\024\034" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\074" +
    "\051\001\002\000\004\060\u011f\001\002\000\004\060\u011c" +
    "\001\002\000\004\060\u011a\001\002\000\004\060\u0114\001" +
    "\002\000\004\064\u0113\001\002\000\004\064\u0112\001\002" +
    "\000\062\002\uffea\003\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\063\uffea\074\uffea\001\002" +
    "\000\004\064\u0111\001\002\000\062\002\ufff1\003\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\063\ufff1\074\ufff1\001\002\000\004\074\uffb9\001\002\000" +
    "\062\002\uffe8\003\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\063\uffe8\074\uffe8\001\002\000" +
    "\006\063\u0110\064\u010f\001\002\000\056\003\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\017\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\074" +
    "\uffff\001\002\000\006\051\u010d\060\150\001\002\000\004" +
    "\064\u010c\001\002\000\004\074\uffbb\001\002\000\004\064" +
    "\u010b\001\002\000\004\074\uffbc\001\002\000\030\033\077" +
    "\034\105\040\100\043\103\047\075\060\101\064\274\071" +
    "\110\072\106\073\076\074\104\001\002\000\062\002\uffeb" +
    "\003\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\063\uffeb\074\uffeb\001\002\000\004\064\u0108" +
    "\001\002\000\062\002\uffef\003\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\063\uffef\074\uffef" +
    "\001\002\000\004\060\376\001\002\000\062\002\uffee\003" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\063\uffee\074\uffee\001\002\000\062\002\ufff8\003" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\063\ufff8\074\ufff8\001\002\000\006\064\375\067" +
    "\161\001\002\000\062\002\ufff0\003\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\063\ufff0\074" +
    "\ufff0\001\002\000\004\064\374\001\002\000\062\002\uffe9" +
    "\003\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\063\uffe9\074\uffe9\001\002\000\004\060\362" +
    "\001\002\000\006\035\170\074\167\001\002\000\004\060" +
    "\074\001\002\000\026\033\077\034\105\040\100\043\103" +
    "\047\075\060\101\071\110\072\106\073\076\074\104\001" +
    "\002\000\042\036\uffa2\037\uffa2\041\uffa2\043\uffa2\045\uffa2" +
    "\046\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\061\uffa2\064\uffa2\066\uffa2\001\002\000\042" +
    "\036\uffa0\037\uffa0\041\uffa0\043\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\061\uffa0\064\uffa0\066\uffa0\001\002\000\042\036\uff9e\037" +
    "\uff9e\041\uff9e\043\uff9e\045\uff9e\046\uff9e\050\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\061\uff9e\064" +
    "\uff9e\066\uff9e\001\002\000\026\033\077\034\105\040\100" +
    "\043\103\047\075\060\101\071\110\072\106\073\076\074" +
    "\104\001\002\000\026\033\077\034\105\040\100\043\103" +
    "\047\075\060\101\071\110\072\106\073\076\074\104\001" +
    "\002\000\044\036\uff9b\037\uff9b\041\uff9b\043\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\061\uff9b\064\uff9b\066\uff9b\067\161\001\002" +
    "\000\026\033\077\034\105\040\100\043\103\047\075\060" +
    "\101\071\110\072\106\073\076\074\104\001\002\000\044" +
    "\036\uff9c\037\uff9c\041\uff9c\043\uff9c\045\uff9c\046\uff9c\050" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\060\150\061\uff9c\064\uff9c\066\uff9c\001\002\000\042\036" +
    "\uff9d\037\uff9d\041\uff9d\043\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\061" +
    "\uff9d\064\uff9d\066\uff9d\001\002\000\042\036\uffa1\037\uffa1" +
    "\041\uffa1\043\uffa1\045\uffa1\046\uffa1\050\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\064\uffa1" +
    "\066\uffa1\001\002\000\036\036\122\037\120\041\126\043" +
    "\115\045\123\046\112\050\114\052\121\053\113\054\125" +
    "\055\117\056\116\057\111\061\124\001\002\000\042\036" +
    "\uffa3\037\uffa3\041\uffa3\043\uffa3\045\uffa3\046\uffa3\050\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061" +
    "\uffa3\064\uffa3\066\uffa3\001\002\000\026\033\077\034\105" +
    "\040\100\043\103\047\075\060\101\071\110\072\106\073" +
    "\076\074\104\001\002\000\026\033\077\034\105\040\100" +
    "\043\103\047\075\060\101\071\110\072\106\073\076\074" +
    "\104\001\002\000\026\033\077\034\105\040\100\043\103" +
    "\047\075\060\101\071\110\072\106\073\076\074\104\001" +
    "\002\000\026\033\077\034\105\040\100\043\103\047\075" +
    "\060\101\071\110\072\106\073\076\074\104\001\002\000" +
    "\026\033\077\034\105\040\100\043\103\047\075\060\101" +
    "\071\110\072\106\073\076\074\104\001\002\000\026\033" +
    "\077\034\105\040\100\043\103\047\075\060\101\071\110" +
    "\072\106\073\076\074\104\001\002\000\026\033\077\034" +
    "\105\040\100\043\103\047\075\060\101\071\110\072\106" +
    "\073\076\074\104\001\002\000\026\033\077\034\105\040" +
    "\100\043\103\047\075\060\101\071\110\072\106\073\076" +
    "\074\104\001\002\000\026\033\077\034\105\040\100\043" +
    "\103\047\075\060\101\071\110\072\106\073\076\074\104" +
    "\001\002\000\026\033\077\034\105\040\100\043\103\047" +
    "\075\060\101\071\110\072\106\073\076\074\104\001\002" +
    "\000\026\033\077\034\105\040\100\043\103\047\075\060" +
    "\101\071\110\072\106\073\076\074\104\001\002\000\004" +
    "\062\131\001\002\000\026\033\077\034\105\040\100\043" +
    "\103\047\075\060\101\071\110\072\106\073\076\074\104" +
    "\001\002\000\026\033\077\034\105\040\100\043\103\047" +
    "\075\060\101\071\110\072\106\073\076\074\104\001\002" +
    "\000\042\036\122\037\120\041\uffb2\043\uffb2\045\123\046" +
    "\112\050\114\052\121\053\113\054\125\055\117\056\116" +
    "\057\111\061\uffb2\064\uffb2\066\uffb2\001\002\000\026\036" +
    "\122\037\120\041\uffa6\043\uffa6\045\uffa6\046\uffa6\050\uffa6" +
    "\061\uffa6\064\uffa6\066\uffa6\001\002\000\052\003\047\006" +
    "\055\007\053\010\024\011\045\012\022\013\072\014\056" +
    "\015\071\017\031\022\062\023\073\024\034\025\067\026" +
    "\052\027\037\030\025\031\035\032\036\074\051\001\002" +
    "\000\054\003\047\006\055\007\053\010\024\011\045\012" +
    "\022\013\072\014\056\015\071\017\031\022\062\023\073" +
    "\024\034\025\067\026\052\027\037\030\025\031\035\032" +
    "\036\063\133\074\051\001\002\000\062\002\uff79\003\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\063\uff79\074\uff79\001\002\000\062\002\ufff9\003\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\063\ufff9\074\ufff9\001\002\000\042\036\122\037\120" +
    "\041\uffb0\043\uffb0\045\uffb0\046\uffb0\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\061\uffb0\064\uffb0" +
    "\066\uffb0\001\002\000\042\036\uffad\037\120\041\uffad\043" +
    "\uffad\045\uffad\046\uffad\050\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\061\uffad\064\uffad\066\uffad\001" +
    "\002\000\026\036\122\037\120\041\uffaa\043\uffaa\045\uffaa" +
    "\046\uffaa\050\uffaa\061\uffaa\064\uffaa\066\uffaa\001\002\000" +
    "\042\036\uffac\037\uffac\041\uffac\043\uffac\045\uffac\046\uffac" +
    "\050\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\061\uffac\064\uffac\066\uffac\001\002\000\026\036\122" +
    "\037\120\041\uffa5\043\uffa5\045\uffa5\046\uffa5\050\uffa5\061" +
    "\uffa5\064\uffa5\066\uffa5\001\002\000\026\036\122\037\120" +
    "\041\uffa8\043\uffa8\045\uffa8\046\uffa8\050\uffa8\061\uffa8\064" +
    "\uffa8\066\uffa8\001\002\000\042\036\122\037\120\041\uffb1" +
    "\043\uffb1\045\123\046\112\050\114\052\121\053\113\054" +
    "\125\055\117\056\116\057\111\061\uffb1\064\uffb1\066\uffb1" +
    "\001\002\000\042\036\122\037\120\041\uffae\043\uffae\045" +
    "\uffae\046\uffae\050\uffae\052\121\053\113\054\125\055\117" +
    "\056\116\057\111\061\uffae\064\uffae\066\uffae\001\002\000" +
    "\026\036\122\037\120\041\uffa9\043\uffa9\045\uffa9\046\uffa9" +
    "\050\uffa9\061\uffa9\064\uffa9\066\uffa9\001\002\000\042\036" +
    "\122\037\120\041\uffaf\043\uffaf\045\uffaf\046\uffaf\050\114" +
    "\052\121\053\113\054\125\055\117\056\116\057\111\061" +
    "\uffaf\064\uffaf\066\uffaf\001\002\000\026\036\122\037\120" +
    "\041\uffa7\043\uffa7\045\uffa7\046\uffa7\050\uffa7\061\uffa7\064" +
    "\uffa7\066\uffa7\001\002\000\030\033\077\034\105\040\100" +
    "\043\103\047\075\060\101\061\153\071\110\072\106\073" +
    "\076\074\104\001\002\000\006\061\uff89\066\uff89\001\002" +
    "\000\006\061\155\066\156\001\002\000\044\036\uff8b\037" +
    "\uff8b\041\uff8b\043\uff8b\045\uff8b\046\uff8b\050\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\061\uff8b\064" +
    "\uff8b\066\uff8b\067\uff8b\001\002\000\040\036\122\037\120" +
    "\041\126\043\115\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\061\uff88\066\uff88" +
    "\001\002\000\044\036\uff8c\037\uff8c\041\uff8c\043\uff8c\045" +
    "\uff8c\046\uff8c\050\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\061\uff8c\064\uff8c\066\uff8c\067\uff8c\001" +
    "\002\000\026\033\077\034\105\040\100\043\103\047\075" +
    "\060\101\071\110\072\106\073\076\074\104\001\002\000" +
    "\006\061\uff8a\066\uff8a\001\002\000\042\036\122\037\120" +
    "\041\uff9f\043\uff9f\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\061\uff9f\064\uff9f" +
    "\066\uff9f\001\002\000\004\074\162\001\002\000\004\060" +
    "\150\001\002\000\044\036\uff8e\037\uff8e\041\uff8e\043\uff8e" +
    "\045\uff8e\046\uff8e\050\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\061\uff8e\064\uff8e\066\uff8e\067\uff8e" +
    "\001\002\000\036\036\122\037\120\041\126\043\115\045" +
    "\123\046\112\050\114\052\121\053\113\054\125\055\117" +
    "\056\116\057\111\061\165\001\002\000\042\036\uffa4\037" +
    "\uffa4\041\uffa4\043\uffa4\045\uffa4\046\uffa4\050\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\064" +
    "\uffa4\066\uffa4\001\002\000\042\036\uffab\037\uffab\041\uffab" +
    "\043\uffab\045\uffab\046\uffab\050\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\061\uffab\064\uffab\066\uffab" +
    "\001\002\000\004\060\343\001\002\000\004\060\171\001" +
    "\002\000\004\061\172\001\002\000\004\062\173\001\002" +
    "\000\050\003\207\006\055\007\053\010\024\011\045\012" +
    "\022\014\211\015\222\017\177\022\217\023\223\024\200" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\074" +
    "\051\001\002\000\052\003\207\006\055\007\053\010\024" +
    "\011\045\012\022\014\211\015\222\017\177\022\217\023" +
    "\223\024\200\025\067\026\052\027\037\030\025\031\035" +
    "\032\036\063\342\074\051\001\002\000\004\074\334\001" +
    "\002\000\004\064\333\001\002\000\004\060\311\001\002" +
    "\000\004\060\303\001\002\000\004\064\302\001\002\000" +
    "\004\064\301\001\002\000\056\003\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\014\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\063\uffd6\074\uffd6\001" +
    "\002\000\056\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\063\uffdc\074\uffdc\001\002\000\004\064" +
    "\300\001\002\000\056\003\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\063\uffd5\074\uffd5\001\002\000" +
    "\006\063\277\064\276\001\002\000\004\064\275\001\002" +
    "\000\004\064\274\001\002\000\056\003\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\063\uffda\074\uffda" +
    "\001\002\000\056\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\063\uffe1\074\uffe1\001\002\000\056" +
    "\003\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\063\uffd9\074\uffd9\001\002\000\004\064\273\001\002" +
    "\000\056\003\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\063\uffd7\074\uffd7\001\002\000\004\060\247" +
    "\001\002\000\056\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\063\uffdb\074\uffdb\001\002\000\006" +
    "\064\246\067\161\001\002\000\004\060\234\001\002\000" +
    "\004\060\225\001\002\000\056\003\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\063\uffdd\074\uffdd\001" +
    "\002\000\026\033\077\034\105\040\100\043\103\047\075" +
    "\060\101\071\110\072\106\073\076\074\104\001\002\000" +
    "\036\036\122\037\120\041\126\043\115\045\123\046\112" +
    "\050\114\052\121\053\113\054\125\055\117\056\116\057" +
    "\111\061\227\001\002\000\004\062\230\001\002\000\050" +
    "\003\207\006\055\007\053\010\024\011\045\012\022\014" +
    "\211\015\222\017\177\022\217\023\223\024\200\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\074\051\001" +
    "\002\000\052\003\207\006\055\007\053\010\024\011\045" +
    "\012\022\014\211\015\222\017\177\022\217\023\223\024" +
    "\200\025\067\026\052\027\037\030\025\031\035\032\036" +
    "\063\232\074\051\001\002\000\056\003\uff69\006\uff69\007" +
    "\uff69\010\uff69\011\uff69\012\uff69\014\uff69\015\uff69\017\uff69" +
    "\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\027\uff69\030\uff69\031\uff69\032\uff69\063\uff69\074\uff69" +
    "\001\002\000\056\003\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\063\uffe2\074\uffe2\001\002\000\026" +
    "\033\077\034\105\040\100\043\103\047\075\060\101\071" +
    "\110\072\106\073\076\074\104\001\002\000\036\036\122" +
    "\037\120\041\126\043\115\045\123\046\112\050\114\052" +
    "\121\053\113\054\125\055\117\056\116\057\111\061\236" +
    "\001\002\000\004\062\237\001\002\000\050\003\207\006" +
    "\055\007\053\010\024\011\045\012\022\014\211\015\222" +
    "\017\177\022\217\023\223\024\200\025\067\026\052\027" +
    "\037\030\025\031\035\032\036\074\051\001\002\000\052" +
    "\003\207\006\055\007\053\010\024\011\045\012\022\014" +
    "\211\015\222\017\177\022\217\023\223\024\200\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\063\241\074" +
    "\051\001\002\000\060\003\uff71\006\uff71\007\uff71\010\uff71" +
    "\011\uff71\012\uff71\014\uff71\015\uff71\016\242\017\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\063\uff71\074\uff71\001" +
    "\002\000\004\062\243\001\002\000\050\003\207\006\055" +
    "\007\053\010\024\011\045\012\022\014\211\015\222\017" +
    "\177\022\217\023\223\024\200\025\067\026\052\027\037" +
    "\030\025\031\035\032\036\074\051\001\002\000\052\003" +
    "\207\006\055\007\053\010\024\011\045\012\022\014\211" +
    "\015\222\017\177\022\217\023\223\024\200\025\067\026" +
    "\052\027\037\030\025\031\035\032\036\063\245\074\051" +
    "\001\002\000\056\003\uff70\006\uff70\007\uff70\010\uff70\011" +
    "\uff70\012\uff70\014\uff70\015\uff70\017\uff70\020\uff70\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030" +
    "\uff70\031\uff70\032\uff70\063\uff70\074\uff70\001\002\000\056" +
    "\003\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014" +
    "\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\063\uffde\074\uffde\001\002\000\006\006\250\011\251" +
    "\001\002\000\004\074\270\001\002\000\004\074\265\001" +
    "\002\000\004\064\253\001\002\000\026\033\077\034\105" +
    "\040\100\043\103\047\075\060\101\071\110\072\106\073" +
    "\076\074\104\001\002\000\036\036\122\037\120\041\126" +
    "\043\115\045\123\046\112\050\114\052\121\053\113\054" +
    "\125\055\117\056\116\057\111\064\255\001\002\000\006" +
    "\042\256\044\260\001\002\000\004\061\uff7b\001\002\000" +
    "\004\061\261\001\002\000\004\061\uff7a\001\002\000\004" +
    "\062\262\001\002\000\050\003\207\006\055\007\053\010" +
    "\024\011\045\012\022\014\211\015\222\017\177\022\217" +
    "\023\223\024\200\025\067\026\052\027\037\030\025\031" +
    "\035\032\036\074\051\001\002\000\052\003\207\006\055" +
    "\007\053\010\024\011\045\012\022\014\211\015\222\017" +
    "\177\022\217\023\223\024\200\025\067\026\052\027\037" +
    "\030\025\031\035\032\036\063\264\074\051\001\002\000" +
    "\056\003\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\014\uff6a\015\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a" +
    "\032\uff6a\063\uff6a\074\uff6a\001\002\000\004\051\266\001" +
    "\002\000\026\033\077\034\105\040\100\043\103\047\075" +
    "\060\101\071\110\072\106\073\076\074\104\001\002\000" +
    "\036\036\122\037\120\041\126\043\115\045\123\046\112" +
    "\050\114\052\121\053\113\054\125\055\117\056\116\057" +
    "\111\064\uff7d\001\002\000\004\051\271\001\002\000\026" +
    "\033\077\034\105\040\100\043\103\047\075\060\101\071" +
    "\110\072\106\073\076\074\104\001\002\000\036\036\122" +
    "\037\120\041\126\043\115\045\123\046\112\050\114\052" +
    "\121\053\113\054\125\055\117\056\116\057\111\064\uff7c" +
    "\001\002\000\056\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\063\uffe0\074\uffe0\001\002\000\062" +
    "\002\uff98\003\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\063\uff98\074\uff98\001\002\000\056" +
    "\003\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\063\uffdf\074\uffdf\001\002\000\056\003\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\063\uffd1\074" +
    "\uffd1\001\002\000\056\003\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\063\uffd0\074\uffd0\001\002\000" +
    "\056\003\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\063\uffd4\074\uffd4\001\002\000\056\003\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\063\uffd2" +
    "\074\uffd2\001\002\000\056\003\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\063\uffd3\074\uffd3\001\002" +
    "\000\026\033\077\034\105\040\100\043\103\047\075\060" +
    "\101\071\110\072\106\073\076\074\104\001\002\000\036" +
    "\036\122\037\120\041\126\043\115\045\123\046\112\050" +
    "\114\052\121\053\113\054\125\055\117\056\116\057\111" +
    "\061\305\001\002\000\004\062\306\001\002\000\050\003" +
    "\207\006\055\007\053\010\024\011\045\012\022\014\211" +
    "\015\222\017\177\022\217\023\223\024\200\025\067\026" +
    "\052\027\037\030\025\031\035\032\036\074\051\001\002" +
    "\000\052\003\207\006\055\007\053\010\024\011\045\012" +
    "\022\014\211\015\222\017\177\022\217\023\223\024\200" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\063" +
    "\310\074\051\001\002\000\056\003\uff68\006\uff68\007\uff68" +
    "\010\uff68\011\uff68\012\uff68\014\uff68\015\uff68\017\uff68\020" +
    "\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68" +
    "\027\uff68\030\uff68\031\uff68\032\uff68\063\uff68\074\uff68\001" +
    "\002\000\026\033\077\034\105\040\100\043\103\047\075" +
    "\060\101\071\110\072\106\073\076\074\104\001\002\000" +
    "\036\036\122\037\120\041\126\043\115\045\123\046\112" +
    "\050\114\052\121\053\113\054\125\055\117\056\116\057" +
    "\111\061\313\001\002\000\004\062\314\001\002\000\004" +
    "\021\317\001\002\000\010\020\uff6c\021\uff6c\063\uff6c\001" +
    "\002\000\010\020\325\021\317\063\326\001\002\000\006" +
    "\071\320\072\321\001\002\000\004\065\uff80\001\002\000" +
    "\004\065\uff7f\001\002\000\004\065\323\001\002\000\050" +
    "\003\207\006\055\007\053\010\024\011\045\012\022\014" +
    "\211\015\222\017\177\022\217\023\223\024\200\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\074\051\001" +
    "\002\000\056\003\207\006\055\007\053\010\024\011\045" +
    "\012\022\014\211\015\222\017\177\020\uff6b\021\uff6b\022" +
    "\217\023\223\024\200\025\067\026\052\027\037\030\025" +
    "\031\035\032\036\063\uff6b\074\051\001\002\000\004\065" +
    "\330\001\002\000\056\003\uff6f\006\uff6f\007\uff6f\010\uff6f" +
    "\011\uff6f\012\uff6f\014\uff6f\015\uff6f\017\uff6f\020\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f" +
    "\030\uff6f\031\uff6f\032\uff6f\063\uff6f\074\uff6f\001\002\000" +
    "\010\020\uff6d\021\uff6d\063\uff6d\001\002\000\050\003\207" +
    "\006\055\007\053\010\024\011\045\012\022\014\211\015" +
    "\222\017\177\022\217\023\223\024\200\025\067\026\052" +
    "\027\037\030\025\031\035\032\036\074\051\001\002\000" +
    "\052\003\207\006\055\007\053\010\024\011\045\012\022" +
    "\014\211\015\222\017\177\022\217\023\223\024\200\025" +
    "\067\026\052\027\037\030\025\031\035\032\036\063\332" +
    "\074\051\001\002\000\056\003\uff6e\006\uff6e\007\uff6e\010" +
    "\uff6e\011\uff6e\012\uff6e\014\uff6e\015\uff6e\017\uff6e\020\uff6e" +
    "\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\063\uff6e\074\uff6e\001\002" +
    "\000\056\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\063\uffd8\074\uffd8\001\002\000\010\051\uffb6" +
    "\064\uffb6\066\uffb6\001\002\000\010\051\337\064\uffb5\066" +
    "\336\001\002\000\004\074\341\001\002\000\026\033\077" +
    "\034\105\040\100\043\103\047\075\060\101\071\110\072" +
    "\106\073\076\074\104\001\002\000\036\036\122\037\120" +
    "\041\126\043\115\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\064\uffb4\001\002" +
    "\000\010\051\uffb7\064\uffb7\066\uffb7\001\002\000\062\002" +
    "\uff9a\003\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\063\uff9a\074\uff9a\001\002\000\016\006" +
    "\055\007\053\010\024\011\045\012\022\061\345\001\002" +
    "\000\004\074\361\001\002\000\004\062\356\001\002\000" +
    "\006\061\350\066\351\001\002\000\006\061\uff90\066\uff90" +
    "\001\002\000\004\062\353\001\002\000\014\006\055\007" +
    "\053\010\024\011\045\012\022\001\002\000\006\061\uff91" +
    "\066\uff91\001\002\000\050\003\207\006\055\007\053\010" +
    "\024\011\045\012\022\014\211\015\222\017\177\022\217" +
    "\023\223\024\200\025\067\026\052\027\037\030\025\031" +
    "\035\032\036\074\051\001\002\000\052\003\207\006\055" +
    "\007\053\010\024\011\045\012\022\014\211\015\222\017" +
    "\177\022\217\023\223\024\200\025\067\026\052\027\037" +
    "\030\025\031\035\032\036\063\355\074\051\001\002\000" +
    "\062\002\uff93\003\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\063\uff93\074\uff93\001\002\000" +
    "\050\003\207\006\055\007\053\010\024\011\045\012\022" +
    "\014\211\015\222\017\177\022\217\023\223\024\200\025" +
    "\067\026\052\027\037\030\025\031\035\032\036\074\051" +
    "\001\002\000\052\003\207\006\055\007\053\010\024\011" +
    "\045\012\022\014\211\015\222\017\177\022\217\023\223" +
    "\024\200\025\067\026\052\027\037\030\025\031\035\032" +
    "\036\063\360\074\051\001\002\000\062\002\uff92\003\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\063\uff92\074\uff92\001\002\000\006\061\uff8f\066\uff8f" +
    "\001\002\000\026\033\077\034\105\040\100\043\103\047" +
    "\075\060\101\071\110\072\106\073\076\074\104\001\002" +
    "\000\036\036\122\037\120\041\126\043\115\045\123\046" +
    "\112\050\114\052\121\053\113\054\125\055\117\056\116" +
    "\057\111\061\364\001\002\000\004\062\365\001\002\000" +
    "\052\003\047\006\055\007\053\010\024\011\045\012\022" +
    "\013\072\014\056\015\071\017\031\022\062\023\073\024" +
    "\034\025\067\026\052\027\037\030\025\031\035\032\036" +
    "\074\051\001\002\000\054\003\047\006\055\007\053\010" +
    "\024\011\045\012\022\013\072\014\056\015\071\017\031" +
    "\022\062\023\073\024\034\025\067\026\052\027\037\030" +
    "\025\031\035\032\036\063\367\074\051\001\002\000\064" +
    "\002\uff87\003\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\370\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\063\uff87\074\uff87\001\002" +
    "\000\004\062\371\001\002\000\052\003\047\006\055\007" +
    "\053\010\024\011\045\012\022\013\072\014\056\015\071" +
    "\017\031\022\062\023\073\024\034\025\067\026\052\027" +
    "\037\030\025\031\035\032\036\074\051\001\002\000\054" +
    "\003\047\006\055\007\053\010\024\011\045\012\022\013" +
    "\072\014\056\015\071\017\031\022\062\023\073\024\034" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\063" +
    "\373\074\051\001\002\000\062\002\uff86\003\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\063" +
    "\uff86\074\uff86\001\002\000\062\002\uff97\003\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\063" +
    "\uff97\074\uff97\001\002\000\062\002\uffec\003\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\063" +
    "\uffec\074\uffec\001\002\000\006\006\250\011\251\001\002" +
    "\000\004\064\u0100\001\002\000\026\033\077\034\105\040" +
    "\100\043\103\047\075\060\101\071\110\072\106\073\076" +
    "\074\104\001\002\000\036\036\122\037\120\041\126\043" +
    "\115\045\123\046\112\050\114\052\121\053\113\054\125" +
    "\055\117\056\116\057\111\064\u0102\001\002\000\006\042" +
    "\256\044\260\001\002\000\004\061\u0104\001\002\000\004" +
    "\062\u0105\001\002\000\052\003\047\006\055\007\053\010" +
    "\024\011\045\012\022\013\072\014\056\015\071\017\031" +
    "\022\062\023\073\024\034\025\067\026\052\027\037\030" +
    "\025\031\035\032\036\074\051\001\002\000\054\003\047" +
    "\006\055\007\053\010\024\011\045\012\022\013\072\014" +
    "\056\015\071\017\031\022\062\023\073\024\034\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\063\u0107\074" +
    "\051\001\002\000\062\002\uff7e\003\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\063\uff7e\074" +
    "\uff7e\001\002\000\062\002\ufff7\003\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\063\ufff7\074" +
    "\ufff7\001\002\000\036\036\122\037\120\041\126\043\115" +
    "\045\123\046\112\050\114\052\121\053\113\054\125\055" +
    "\117\056\116\057\111\064\u010a\001\002\000\062\002\uff99" +
    "\003\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\063\uff99\074\uff99\001\002\000\062\002\ufff6" +
    "\003\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\063\ufff6\074\ufff6\001\002\000\062\002\uff96" +
    "\003\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\063\uff96\074\uff96\001\002\000\026\033\077" +
    "\034\105\040\100\043\103\047\075\060\101\071\110\072" +
    "\106\073\076\074\104\001\002\000\036\036\122\037\120" +
    "\041\126\043\115\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\064\uffb3\001\002" +
    "\000\062\002\uffe4\003\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\063\uffe4\074\uffe4\001\002" +
    "\000\062\002\uffe3\003\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\063\uffe3\074\uffe3\001\002" +
    "\000\062\002\uffe7\003\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\063\uffe7\074\uffe7\001\002" +
    "\000\062\002\uffe5\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\063\uffe5\074\uffe5\001\002" +
    "\000\062\002\uffe6\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\063\uffe6\074\uffe6\001\002" +
    "\000\026\033\077\034\105\040\100\043\103\047\075\060" +
    "\101\071\110\072\106\073\076\074\104\001\002\000\006" +
    "\061\u0117\066\u0118\001\002\000\040\036\122\037\120\041" +
    "\126\043\115\045\123\046\112\050\114\052\121\053\113" +
    "\054\125\055\117\056\116\057\111\061\uff75\066\uff75\001" +
    "\002\000\004\064\uff77\001\002\000\026\033\077\034\105" +
    "\040\100\043\103\047\075\060\101\071\110\072\106\073" +
    "\076\074\104\001\002\000\040\036\122\037\120\041\126" +
    "\043\115\045\123\046\112\050\114\052\121\053\113\054" +
    "\125\055\117\056\116\057\111\061\uff76\066\uff76\001\002" +
    "\000\004\061\u011b\001\002\000\004\064\uff72\001\002\000" +
    "\026\033\077\034\105\040\100\043\103\047\075\060\101" +
    "\071\110\072\106\073\076\074\104\001\002\000\036\036" +
    "\122\037\120\041\126\043\115\045\123\046\112\050\114" +
    "\052\121\053\113\054\125\055\117\056\116\057\111\061" +
    "\u011e\001\002\000\004\064\uff73\001\002\000\026\033\077" +
    "\034\105\040\100\043\103\047\075\060\101\071\110\072" +
    "\106\073\076\074\104\001\002\000\036\036\122\037\120" +
    "\041\126\043\115\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\061\u0121\001\002" +
    "\000\004\062\u0122\001\002\000\052\003\047\006\055\007" +
    "\053\010\024\011\045\012\022\013\072\014\056\015\071" +
    "\017\031\022\062\023\073\024\034\025\067\026\052\027" +
    "\037\030\025\031\035\032\036\074\051\001\002\000\054" +
    "\003\047\006\055\007\053\010\024\011\045\012\022\013" +
    "\072\014\056\015\071\017\031\022\062\023\073\024\034" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\063" +
    "\u0124\074\051\001\002\000\062\002\uff78\003\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\063" +
    "\uff78\074\uff78\001\002\000\026\033\077\034\105\040\100" +
    "\043\103\047\075\060\101\071\110\072\106\073\076\074" +
    "\104\001\002\000\036\036\122\037\120\041\126\043\115" +
    "\045\123\046\112\050\114\052\121\053\113\054\125\055" +
    "\117\056\116\057\111\061\u0127\001\002\000\004\062\u0128" +
    "\001\002\000\004\021\u012b\001\002\000\010\020\u012f\021" +
    "\u012b\063\u0131\001\002\000\010\020\uff82\021\uff82\063\uff82" +
    "\001\002\000\006\071\320\072\321\001\002\000\004\065" +
    "\u012d\001\002\000\052\003\047\006\055\007\053\010\024" +
    "\011\045\012\022\013\072\014\056\015\071\017\031\022" +
    "\062\023\073\024\034\025\067\026\052\027\037\030\025" +
    "\031\035\032\036\074\051\001\002\000\060\003\047\006" +
    "\055\007\053\010\024\011\045\012\022\013\072\014\056" +
    "\015\071\017\031\020\uff81\021\uff81\022\062\023\073\024" +
    "\034\025\067\026\052\027\037\030\025\031\035\032\036" +
    "\063\uff81\074\051\001\002\000\004\065\u0132\001\002\000" +
    "\010\020\uff83\021\uff83\063\uff83\001\002\000\062\002\uff85" +
    "\003\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\014\uff85\015\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\063\uff85\074\uff85\001\002\000\052\003\047" +
    "\006\055\007\053\010\024\011\045\012\022\013\072\014" +
    "\056\015\071\017\031\022\062\023\073\024\034\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\074\051\001" +
    "\002\000\054\003\047\006\055\007\053\010\024\011\045" +
    "\012\022\013\072\014\056\015\071\017\031\022\062\023" +
    "\073\024\034\025\067\026\052\027\037\030\025\031\035" +
    "\032\036\063\u0134\074\051\001\002\000\062\002\uff84\003" +
    "\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84" +
    "\014\uff84\015\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\063\uff84\074\uff84\001\002\000\062\002\uffed\003" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\063\uffed\074\uffed\001\002\000\004\074\u0137\001" +
    "\002\000\004\061\u0138\001\002\000\004\064\uff74\001\002" +
    "\000\012\051\uffb6\060\u013a\064\uffb6\066\uffb6\001\002\000" +
    "\016\006\055\007\053\010\024\011\045\012\022\061\u013b" +
    "\001\002\000\004\062\u0192\001\002\000\006\061\u013d\066" +
    "\351\001\002\000\004\062\u013e\001\002\000\050\003\u0149" +
    "\006\055\007\053\010\024\011\045\012\022\014\u014b\015" +
    "\u0155\017\u0141\022\u014f\023\u0156\024\u0143\025\067\026\052" +
    "\027\037\030\025\031\035\032\036\074\051\001\002\000" +
    "\056\003\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\014\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\063\uffca\074\uffca\001\002\000\004\064\u0191\001" +
    "\002\000\004\060\u0181\001\002\000\056\003\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\063\uffc7\074" +
    "\uffc7\001\002\000\004\060\u017b\001\002\000\004\064\u017a" +
    "\001\002\000\004\064\u0179\001\002\000\052\003\u0149\006" +
    "\055\007\053\010\024\011\045\012\022\014\u014b\015\u0155" +
    "\017\u0141\022\u014f\023\u0156\024\u0143\025\067\026\052\027" +
    "\037\030\025\031\035\032\036\063\u0178\074\051\001\002" +
    "\000\056\003\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\063\uffc3\074\uffc3\001\002\000\004\064\u0177" +
    "\001\002\000\006\063\u0176\064\u0175\001\002\000\056\003" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce" +
    "\015\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\063\uffce\074\uffce\001\002\000\026\033\077\034\105\040" +
    "\100\043\103\047\075\060\101\071\110\072\106\073\076" +
    "\074\104\001\002\000\004\064\u0174\001\002\000\004\064" +
    "\u0173\001\002\000\056\003\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\063\uffc4\074\uffc4\001\002\000" +
    "\004\060\u0169\001\002\000\056\003\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\063\uffc8\074\uffc8\001" +
    "\002\000\056\003\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\063\uffc6\074\uffc6\001\002\000\006\064" +
    "\u0168\067\161\001\002\000\056\003\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\063\uffc9\074\uffc9\001" +
    "\002\000\056\003\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\063\uffc2\074\uffc2\001\002\000\004\060" +
    "\u015e\001\002\000\004\060\u0157\001\002\000\026\033\077" +
    "\034\105\040\100\043\103\047\075\060\101\071\110\072" +
    "\106\073\076\074\104\001\002\000\036\036\122\037\120" +
    "\041\126\043\115\045\123\046\112\050\114\052\121\053" +
    "\113\054\125\055\117\056\116\057\111\061\u0159\001\002" +
    "\000\004\062\u015a\001\002\000\050\003\u0149\006\055\007" +
    "\053\010\024\011\045\012\022\014\u014b\015\u0155\017\u0141" +
    "\022\u014f\023\u0156\024\u0143\025\067\026\052\027\037\030" +
    "\025\031\035\032\036\074\051\001\002\000\052\003\u0149" +
    "\006\055\007\053\010\024\011\045\012\022\014\u014b\015" +
    "\u0155\017\u0141\022\u014f\023\u0156\024\u0143\025\067\026\052" +
    "\027\037\030\025\031\035\032\036\063\u015c\074\051\001" +
    "\002\000\056\003\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f" +
    "\012\uff5f\014\uff5f\015\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f" +
    "\031\uff5f\032\uff5f\063\uff5f\074\uff5f\001\002\000\056\003" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\063\uffcf\074\uffcf\001\002\000\026\033\077\034\105\040" +
    "\100\043\103\047\075\060\101\071\110\072\106\073\076" +
    "\074\104\001\002\000\036\036\122\037\120\041\126\043" +
    "\115\045\123\046\112\050\114\052\121\053\113\054\125" +
    "\055\117\056\116\057\111\061\u0160\001\002\000\004\062" +
    "\u0161\001\002\000\050\003\u0149\006\055\007\053\010\024" +
    "\011\045\012\022\014\u014b\015\u0155\017\u0141\022\u014f\023" +
    "\u0156\024\u0143\025\067\026\052\027\037\030\025\031\035" +
    "\032\036\074\051\001\002\000\052\003\u0149\006\055\007" +
    "\053\010\024\011\045\012\022\014\u014b\015\u0155\017\u0141" +
    "\022\u014f\023\u0156\024\u0143\025\067\026\052\027\037\030" +
    "\025\031\035\032\036\063\u0163\074\051\001\002\000\060" +
    "\003\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\014" +
    "\uff67\015\uff67\016\u0164\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031" +
    "\uff67\032\uff67\063\uff67\074\uff67\001\002\000\004\062\u0165" +
    "\001\002\000\050\003\u0149\006\055\007\053\010\024\011" +
    "\045\012\022\014\u014b\015\u0155\017\u0141\022\u014f\023\u0156" +
    "\024\u0143\025\067\026\052\027\037\030\025\031\035\032" +
    "\036\074\051\001\002\000\052\003\u0149\006\055\007\053" +
    "\010\024\011\045\012\022\014\u014b\015\u0155\017\u0141\022" +
    "\u014f\023\u0156\024\u0143\025\067\026\052\027\037\030\025" +
    "\031\035\032\036\063\u0167\074\051\001\002\000\056\003" +
    "\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66\014\uff66" +
    "\015\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024" +
    "\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66" +
    "\063\uff66\074\uff66\001\002\000\056\003\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\063\uffcb\074\uffcb" +
    "\001\002\000\006\006\250\011\251\001\002\000\004\064" +
    "\u016b\001\002\000\026\033\077\034\105\040\100\043\103" +
    "\047\075\060\101\071\110\072\106\073\076\074\104\001" +
    "\002\000\036\036\122\037\120\041\126\043\115\045\123" +
    "\046\112\050\114\052\121\053\113\054\125\055\117\056" +
    "\116\057\111\064\u016d\001\002\000\006\042\256\044\260" +
    "\001\002\000\004\061\u016f\001\002\000\004\062\u0170\001" +
    "\002\000\050\003\u0149\006\055\007\053\010\024\011\045" +
    "\012\022\014\u014b\015\u0155\017\u0141\022\u014f\023\u0156\024" +
    "\u0143\025\067\026\052\027\037\030\025\031\035\032\036" +
    "\074\051\001\002\000\052\003\u0149\006\055\007\053\010" +
    "\024\011\045\012\022\014\u014b\015\u0155\017\u0141\022\u014f" +
    "\023\u0156\024\u0143\025\067\026\052\027\037\030\025\031" +
    "\035\032\036\063\u0172\074\051\001\002\000\056\003\uff60" +
    "\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\014\uff60\015" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\063" +
    "\uff60\074\uff60\001\002\000\056\003\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\063\uffcd\074\uffcd\001" +
    "\002\000\056\003\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\063\uffcc\074\uffcc\001\002\000\056\003" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\063\uffbe\074\uffbe\001\002\000\056\003\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\063\uffbd\074\uffbd" +
    "\001\002\000\056\003\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\063\uffc1\074\uffc1\001\002\000\062" +
    "\002\uff95\003\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\063\uff95\074\uff95\001\002\000\056" +
    "\003\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\063\uffbf\074\uffbf\001\002\000\056\003\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\063\uffc0\074" +
    "\uffc0\001\002\000\026\033\077\034\105\040\100\043\103" +
    "\047\075\060\101\071\110\072\106\073\076\074\104\001" +
    "\002\000\036\036\122\037\120\041\126\043\115\045\123" +
    "\046\112\050\114\052\121\053\113\054\125\055\117\056" +
    "\116\057\111\061\u017d\001\002\000\004\062\u017e\001\002" +
    "\000\050\003\u0149\006\055\007\053\010\024\011\045\012" +
    "\022\014\u014b\015\u0155\017\u0141\022\u014f\023\u0156\024\u0143" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\074" +
    "\051\001\002\000\052\003\u0149\006\055\007\053\010\024" +
    "\011\045\012\022\014\u014b\015\u0155\017\u0141\022\u014f\023" +
    "\u0156\024\u0143\025\067\026\052\027\037\030\025\031\035" +
    "\032\036\063\u0180\074\051\001\002\000\056\003\uff5e\006" +
    "\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\014\uff5e\015\uff5e" +
    "\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025" +
    "\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\063\uff5e" +
    "\074\uff5e\001\002\000\026\033\077\034\105\040\100\043" +
    "\103\047\075\060\101\071\110\072\106\073\076\074\104" +
    "\001\002\000\036\036\122\037\120\041\126\043\115\045" +
    "\123\046\112\050\114\052\121\053\113\054\125\055\117" +
    "\056\116\057\111\061\u0183\001\002\000\004\062\u0184\001" +
    "\002\000\004\021\u0186\001\002\000\010\020\uff62\021\uff62" +
    "\063\uff62\001\002\000\006\071\320\072\321\001\002\000" +
    "\010\020\u0189\021\u0186\063\u018a\001\002\000\010\020\uff63" +
    "\021\uff63\063\uff63\001\002\000\004\065\u018b\001\002\000" +
    "\056\003\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65" +
    "\014\uff65\015\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023" +
    "\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65" +
    "\032\uff65\063\uff65\074\uff65\001\002\000\050\003\u0149\006" +
    "\055\007\053\010\024\011\045\012\022\014\u014b\015\u0155" +
    "\017\u0141\022\u014f\023\u0156\024\u0143\025\067\026\052\027" +
    "\037\030\025\031\035\032\036\074\051\001\002\000\052" +
    "\003\u0149\006\055\007\053\010\024\011\045\012\022\014" +
    "\u014b\015\u0155\017\u0141\022\u014f\023\u0156\024\u0143\025\067" +
    "\026\052\027\037\030\025\031\035\032\036\063\u018d\074" +
    "\051\001\002\000\056\003\uff64\006\uff64\007\uff64\010\uff64" +
    "\011\uff64\012\uff64\014\uff64\015\uff64\017\uff64\020\uff64\021" +
    "\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64" +
    "\030\uff64\031\uff64\032\uff64\063\uff64\074\uff64\001\002\000" +
    "\004\065\u018f\001\002\000\050\003\u0149\006\055\007\053" +
    "\010\024\011\045\012\022\014\u014b\015\u0155\017\u0141\022" +
    "\u014f\023\u0156\024\u0143\025\067\026\052\027\037\030\025" +
    "\031\035\032\036\074\051\001\002\000\056\003\u0149\006" +
    "\055\007\053\010\024\011\045\012\022\014\u014b\015\u0155" +
    "\017\u0141\020\uff61\021\uff61\022\u014f\023\u0156\024\u0143\025" +
    "\067\026\052\027\037\030\025\031\035\032\036\063\uff61" +
    "\074\051\001\002\000\056\003\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\063\uffc5\074\uffc5\001\002" +
    "\000\050\003\u0149\006\055\007\053\010\024\011\045\012" +
    "\022\014\u014b\015\u0155\017\u0141\022\u014f\023\u0156\024\u0143" +
    "\025\067\026\052\027\037\030\025\031\035\032\036\074" +
    "\051\001\002\000\052\003\u0149\006\055\007\053\010\024" +
    "\011\045\012\022\014\u014b\015\u0155\017\u0141\022\u014f\023" +
    "\u0156\024\u0143\025\067\026\052\027\037\030\025\031\035" +
    "\032\036\063\u0194\074\051\001\002\000\062\002\uff94\003" +
    "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\063\uff94\074\uff94\001\002\000\004\064\ufffa\001" +
    "\002\000\056\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\074\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\014\002\011\003\006\004\005\007\010\010" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\004\047\005\032\006\063\007\010\010" +
    "\003\011\020\012\031\013\057\014\053\020\027\021\026" +
    "\022\067\023\045\026\064\027\022\030\056\031\041\034" +
    "\025\035\042\036\037\037\040\040\017\041\043\045\065" +
    "\050\060\051\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\133\011\020\012" +
    "\031\013\057\014\053\020\027\021\026\022\067\023\045" +
    "\026\064\027\022\030\056\031\041\034\025\035\042\036" +
    "\037\037\040\040\017\041\043\045\065\050\060\051\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u0108" +
    "\026\101\027\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\106\026\101\027" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\165\026\101\027\022\001\001\000" +
    "\010\016\163\026\101\027\022\001\001\000\002\001\001" +
    "\000\010\016\157\026\101\027\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\146\026\101\027\022\001" +
    "\001\000\010\016\145\026\101\027\022\001\001\000\010" +
    "\016\144\026\101\027\022\001\001\000\010\016\143\026" +
    "\101\027\022\001\001\000\010\016\142\026\101\027\022" +
    "\001\001\000\010\016\141\026\101\027\022\001\001\000" +
    "\010\016\140\026\101\027\022\001\001\000\010\016\137" +
    "\026\101\027\022\001\001\000\010\016\136\026\101\027" +
    "\022\001\001\000\010\016\135\026\101\027\022\001\001" +
    "\000\010\016\134\026\101\027\022\001\001\000\002\001" +
    "\001\000\010\016\127\026\101\027\022\001\001\000\010" +
    "\016\126\026\101\027\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\005\131\006\063\011\020\012\031" +
    "\013\057\014\053\020\027\021\026\022\067\023\045\026" +
    "\064\027\022\030\056\031\041\034\025\035\042\036\037" +
    "\037\040\040\017\041\043\045\065\050\060\051\062\001" +
    "\001\000\056\006\133\011\020\012\031\013\057\014\053" +
    "\020\027\021\026\022\067\023\045\026\064\027\022\030" +
    "\056\031\041\034\025\035\042\036\037\037\040\040\017" +
    "\041\043\045\065\050\060\051\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\153\026\101\027\022\032\151\033\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\153\026\101\027\022" +
    "\033\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\174\013\214\014\207\023\205\026" +
    "\220\027\022\030\215\031\202\034\175\035\204\036\200" +
    "\037\201\052\173\053\212\056\223\057\203\060\217\061" +
    "\211\062\213\001\001\000\046\011\174\013\214\014\207" +
    "\023\205\026\220\027\022\030\215\031\202\034\175\035" +
    "\204\036\200\037\201\053\232\056\223\057\203\060\217" +
    "\061\211\062\213\001\001\000\004\015\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\225\026\101\027\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\174\013\214\014\207" +
    "\023\205\026\220\027\022\030\215\031\202\034\175\035" +
    "\204\036\200\037\201\052\230\053\212\056\223\057\203" +
    "\060\217\061\211\062\213\001\001\000\046\011\174\013" +
    "\214\014\207\023\205\026\220\027\022\030\215\031\202" +
    "\034\175\035\204\036\200\037\201\053\232\056\223\057" +
    "\203\060\217\061\211\062\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\234\026\101\027\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\174" +
    "\013\214\014\207\023\205\026\220\027\022\030\215\031" +
    "\202\034\175\035\204\036\200\037\201\052\237\053\212" +
    "\056\223\057\203\060\217\061\211\062\213\001\001\000" +
    "\046\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\053" +
    "\232\056\223\057\203\060\217\061\211\062\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\174\013" +
    "\214\014\207\023\205\026\220\027\022\030\215\031\202" +
    "\034\175\035\204\036\200\037\201\052\243\053\212\056" +
    "\223\057\203\060\217\061\211\062\213\001\001\000\046" +
    "\011\174\013\214\014\207\023\205\026\220\027\022\030" +
    "\215\031\202\034\175\035\204\036\200\037\201\053\232" +
    "\056\223\057\203\060\217\061\211\062\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\253\026\101\027\022\001\001\000\002\001\001" +
    "\000\004\047\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\174" +
    "\013\214\014\207\023\205\026\220\027\022\030\215\031" +
    "\202\034\175\035\204\036\200\037\201\052\262\053\212" +
    "\056\223\057\203\060\217\061\211\062\213\001\001\000" +
    "\046\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\053" +
    "\232\056\223\057\203\060\217\061\211\062\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\266\026" +
    "\101\027\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\271\026\101\027\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\303\026\101" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\052" +
    "\306\053\212\056\223\057\203\060\217\061\211\062\213" +
    "\001\001\000\046\011\174\013\214\014\207\023\205\026" +
    "\220\027\022\030\215\031\202\034\175\035\204\036\200" +
    "\037\201\053\232\056\223\057\203\060\217\061\211\062" +
    "\213\001\001\000\002\001\001\000\010\016\311\026\101" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\063\315\064\314\001\001\000\002\001\001\000\004" +
    "\064\326\001\001\000\004\044\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\174" +
    "\013\214\014\207\023\205\026\220\027\022\030\215\031" +
    "\202\034\175\035\204\036\200\037\201\052\323\053\212" +
    "\056\223\057\203\060\217\061\211\062\213\001\001\000" +
    "\046\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\053" +
    "\232\056\223\057\203\060\217\061\211\062\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\052" +
    "\330\053\212\056\223\057\203\060\217\061\211\062\213" +
    "\001\001\000\046\011\174\013\214\014\207\023\205\026" +
    "\220\027\022\030\215\031\202\034\175\035\204\036\200" +
    "\037\201\053\232\056\223\057\203\060\217\061\211\062" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\337\026\101\027\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\343\024\345\025" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\343\025\351\001\001\000\002\001\001\000\050\011\174" +
    "\013\214\014\207\023\205\026\220\027\022\030\215\031" +
    "\202\034\175\035\204\036\200\037\201\052\353\053\212" +
    "\056\223\057\203\060\217\061\211\062\213\001\001\000" +
    "\046\011\174\013\214\014\207\023\205\026\220\027\022" +
    "\030\215\031\202\034\175\035\204\036\200\037\201\053" +
    "\232\056\223\057\203\060\217\061\211\062\213\001\001" +
    "\000\002\001\001\000\050\011\174\013\214\014\207\023" +
    "\205\026\220\027\022\030\215\031\202\034\175\035\204" +
    "\036\200\037\201\052\356\053\212\056\223\057\203\060" +
    "\217\061\211\062\213\001\001\000\046\011\174\013\214" +
    "\014\207\023\205\026\220\027\022\030\215\031\202\034" +
    "\175\035\204\036\200\037\201\053\232\056\223\057\203" +
    "\060\217\061\211\062\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\362\026\101\027\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\005\365\006" +
    "\063\011\020\012\031\013\057\014\053\020\027\021\026" +
    "\022\067\023\045\026\064\027\022\030\056\031\041\034" +
    "\025\035\042\036\037\037\040\040\017\041\043\045\065" +
    "\050\060\051\062\001\001\000\056\006\133\011\020\012" +
    "\031\013\057\014\053\020\027\021\026\022\067\023\045" +
    "\026\064\027\022\030\056\031\041\034\025\035\042\036" +
    "\037\037\040\040\017\041\043\045\065\050\060\051\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\005" +
    "\371\006\063\011\020\012\031\013\057\014\053\020\027" +
    "\021\026\022\067\023\045\026\064\027\022\030\056\031" +
    "\041\034\025\035\042\036\037\037\040\040\017\041\043" +
    "\045\065\050\060\051\062\001\001\000\056\006\133\011" +
    "\020\012\031\013\057\014\053\020\027\021\026\022\067" +
    "\023\045\026\064\027\022\030\056\031\041\034\025\035" +
    "\042\036\037\037\040\040\017\041\043\045\065\050\060" +
    "\051\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\376\001\001\000\002\001\001" +
    "\000\010\016\u0100\026\101\027\022\001\001\000\002\001" +
    "\001\000\004\047\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\005\u0105\006\063\011\020\012\031\013" +
    "\057\014\053\020\027\021\026\022\067\023\045\026\064" +
    "\027\022\030\056\031\041\034\025\035\042\036\037\037" +
    "\040\040\017\041\043\045\065\050\060\051\062\001\001" +
    "\000\056\006\133\011\020\012\031\013\057\014\053\020" +
    "\027\021\026\022\067\023\045\026\064\027\022\030\056" +
    "\031\041\034\025\035\042\036\037\037\040\040\017\041" +
    "\043\045\065\050\060\051\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u010d\026\101" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\u0115\017\u0114\026\101\027\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\u0118\026\101\027\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u011c" +
    "\026\101\027\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\u011f\026\101\027\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\005\u0122\006\063\011" +
    "\020\012\031\013\057\014\053\020\027\021\026\022\067" +
    "\023\045\026\064\027\022\030\056\031\041\034\025\035" +
    "\042\036\037\037\040\040\017\041\043\045\065\050\060" +
    "\051\062\001\001\000\056\006\133\011\020\012\031\013" +
    "\057\014\053\020\027\021\026\022\067\023\045\026\064" +
    "\027\022\030\056\031\041\034\025\035\042\036\037\037" +
    "\040\040\017\041\043\045\065\050\060\051\062\001\001" +
    "\000\002\001\001\000\010\016\u0125\026\101\027\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u0128" +
    "\043\u0129\001\001\000\004\043\u012f\001\001\000\002\001" +
    "\001\000\004\044\u012b\001\001\000\002\001\001\000\060" +
    "\005\u012d\006\063\011\020\012\031\013\057\014\053\020" +
    "\027\021\026\022\067\023\045\026\064\027\022\030\056" +
    "\031\041\034\025\035\042\036\037\037\040\040\017\041" +
    "\043\045\065\050\060\051\062\001\001\000\056\006\133" +
    "\011\020\012\031\013\057\014\053\020\027\021\026\022" +
    "\067\023\045\026\064\027\022\030\056\031\041\034\025" +
    "\035\042\036\037\037\040\040\017\041\043\045\065\050" +
    "\060\051\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\u0132\006\063\011\020\012" +
    "\031\013\057\014\053\020\027\021\026\022\067\023\045" +
    "\026\064\027\022\030\056\031\041\034\025\035\042\036" +
    "\037\037\040\040\017\041\043\045\065\050\060\051\062" +
    "\001\001\000\056\006\133\011\020\012\031\013\057\014" +
    "\053\020\027\021\026\022\067\023\045\026\064\027\022" +
    "\030\056\031\041\034\025\035\042\036\037\037\040\040" +
    "\017\041\043\045\065\050\060\051\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\343" +
    "\024\u013b\025\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\174\013\u014c\014\u014b" +
    "\022\u0153\026\u0151\027\022\030\u014d\031\u0146\034\u013f\035" +
    "\u0147\036\u0143\037\u0144\054\u0145\055\u0149\065\u013e\066\u0152" +
    "\067\u014f\070\u0141\071\u0150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030\u014d" +
    "\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\055\u015c\065" +
    "\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\u0108\026\101\027\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\u0157\026\101\027\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\174\013" +
    "\u014c\014\u014b\022\u0153\026\u0151\027\022\030\u014d\031\u0146" +
    "\034\u013f\035\u0147\036\u0143\037\u0144\054\u015a\055\u0149\065" +
    "\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001\001\000\046" +
    "\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030" +
    "\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\055\u015c" +
    "\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u015e\026\101" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022" +
    "\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\054" +
    "\u0161\055\u0149\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150" +
    "\001\001\000\046\011\174\013\u014c\014\u014b\022\u0153\026" +
    "\u0151\027\022\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143" +
    "\037\u0144\055\u015c\065\u013e\066\u0152\067\u014f\070\u0141\071" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030" +
    "\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\054\u0165" +
    "\055\u0149\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001" +
    "\001\000\046\011\174\013\u014c\014\u014b\022\u0153\026\u0151" +
    "\027\022\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037" +
    "\u0144\055\u015c\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0169\001\001\000\002\001\001\000\010\016\u016b\026\101" +
    "\027\022\001\001\000\002\001\001\000\004\047\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\174" +
    "\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030\u014d\031" +
    "\u0146\034\u013f\035\u0147\036\u0143\037\u0144\054\u0170\055\u0149" +
    "\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001\001\000" +
    "\046\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022" +
    "\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\055" +
    "\u015c\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\u017b\026\101\027\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\174\013\u014c\014\u014b\022\u0153\026" +
    "\u0151\027\022\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143" +
    "\037\u0144\054\u017e\055\u0149\065\u013e\066\u0152\067\u014f\070" +
    "\u0141\071\u0150\001\001\000\046\011\174\013\u014c\014\u014b" +
    "\022\u0153\026\u0151\027\022\030\u014d\031\u0146\034\u013f\035" +
    "\u0147\036\u0143\037\u0144\055\u015c\065\u013e\066\u0152\067\u014f" +
    "\070\u0141\071\u0150\001\001\000\002\001\001\000\010\016" +
    "\u0181\026\101\027\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\072\u0186\073\u0184\001\001\000\002\001" +
    "\001\000\004\044\u018d\001\001\000\004\073\u0187\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022" +
    "\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\054" +
    "\u018b\055\u0149\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150" +
    "\001\001\000\046\011\174\013\u014c\014\u014b\022\u0153\026" +
    "\u0151\027\022\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143" +
    "\037\u0144\055\u015c\065\u013e\066\u0152\067\u014f\070\u0141\071" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\174\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030" +
    "\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037\u0144\054\u018f" +
    "\055\u0149\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150\001" +
    "\001\000\046\011\174\013\u014c\014\u014b\022\u0153\026\u0151" +
    "\027\022\030\u014d\031\u0146\034\u013f\035\u0147\036\u0143\037" +
    "\u0144\055\u015c\065\u013e\066\u0152\067\u014f\070\u0141\071\u0150" +
    "\001\001\000\002\001\001\000\050\011\174\013\u014c\014" +
    "\u014b\022\u0153\026\u0151\027\022\030\u014d\031\u0146\034\u013f" +
    "\035\u0147\036\u0143\037\u0144\054\u0192\055\u0149\065\u013e\066" +
    "\u0152\067\u014f\070\u0141\071\u0150\001\001\000\046\011\174" +
    "\013\u014c\014\u014b\022\u0153\026\u0151\027\022\030\u014d\031" +
    "\u0146\034\u013f\035\u0147\036\u0143\037\u0144\055\u015c\065\u013e" +
    "\066\u0152\067\u014f\070\u0141\071\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<ErrorT> lista_errores;
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FMIENTRAS_QUE",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FHASTA_QUE",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    aux.hijos.add(asig);
                    aux.hijos.add(exp);
                    aux.hijos.add(inc);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FPARA",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FVALOR ::= tokValor TIPODATO tokDosp FSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    aux.hijos.add(tipo);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALOR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FVALORES ::= FVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.hijos.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FVALORES ::= FVALORES FVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 valores.hijos.add(valor); RESULT = valores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokNoCumple tokDosp FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla tokEsFalso tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    //aux.hijos.add(new Nodo("ES_FALSO"));
                    aux.hijos.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MMIENTRAS_QUE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MHASTA_QUE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    aux.hijos.add(asig);
                    aux.hijos.add(exp);
                    aux.hijos.add(inc);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MPARA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MVALOR ::= tokValor TIPODATO tokDosp MSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    aux.hijos.add(tipo);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALOR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MVALORES ::= MVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.hijos.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MVALORES ::= MVALORES MVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 valores.hijos.add(valor); RESULT = valores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokNoCumple tokDosp MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla tokEsFalso tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    //aux.hijos.add(new Nodo("ES_FALSO"));
                    aux.hijos.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DIBUJAR_TS ::= tokDibujarTS tokApar tokCpar 
            {
              Nodo RESULT =null;
		
                    Nodo aux = new Nodo("DIBUJAR_TS");
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_TS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DIBUJAR_EXP ::= tokDibujarExp tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_EXP");
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_EXP",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DIBUJAR_AST ::= tokDibujarAST tokApar tokId tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_AST");
                    aux.hijos.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_AST",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LEXP ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LEXP");
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEXP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LEXP ::= LEXP tokComa EXP 
            {
              Nodo RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lexp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 lexp.hijos.add(exp); RESULT = lexp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEXP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MOSTRAR ::= tokMostrar tokApar LEXP tokCpar 
            {
              Nodo RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lexp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MOSTRAR");
                    aux.hijos.add(lexp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla SENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS_QUE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // HASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla SENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HASTA_QUE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INCRE_DECRE ::= tokMenosMenos 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("--"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INCRE_DECRE ::= tokMasMas 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("++"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIG_PARA ::= tokDecimal tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIG_PARA ::= tokEntero tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIG_PARA");
                    aux.hijos.add(new Nodo("Entero"));
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla SENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    aux.hijos.add(asig);
                    aux.hijos.add(exp);
                    aux.hijos.add(inc);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPODATO ::= tokString 
            {
              Nodo RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String cad=string;
                    string=string.replaceAll("\"","");
                    RESULT = new Nodo(string);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPODATO ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nodo(num); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALOR ::= tokValor TIPODATO tokDosp SENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    aux.hijos.add(tipo);
                    aux.hijos.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALORES ::= VALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.hijos.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALORES ::= VALORES VALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 valores.hijos.add(valor); RESULT = valores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla VALORES tokNoCumple tokDosp SENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIAR_A",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla VALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    aux.hijos.add(exp);
                    aux.hijos.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIAR_A",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla SENTS tokClla tokEsFalso tokAlla SENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    //aux.hijos.add(new Nodo("ES_FALSO"));
                    aux.hijos.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ES_VERDADERO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla SENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    aux.hijos.add(exp);
                    aux.hijos.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ES_VERDADERO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMETROIN ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROIN");
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMETROSIN ::= PARAMETROIN 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROSIN");
                    aux.hijos.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETROSIN ::= PARAMETROSIN tokComa PARAMETROIN 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 pars.hijos.add(par); RESULT = pars; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LLAMAR ::= tokId tokApar tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo aux = new Nodo("LLAMAR");
                    aux.hijos.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LLAMAR ::= tokId tokApar PARAMETROSIN tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parinleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parinright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo parin = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("LLAMAR");
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(parin);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LLAMADA ::= LLAMAR 
            {
              Nodo RESULT =null;
		int llamarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LLAMADA");
                    aux.hijos.add(llamar);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LLAMADA ::= LLAMADA tokPunto LLAMAR 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int llamarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 llamada.hijos.add(llamar); RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMETRO ::= TIPO tokId 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("PARAMETRO");
                    aux.hijos.add(tipo);
                    aux.hijos.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETROS ::= PARAMETRO 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROS");
                    aux.hijos.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETROS ::= PARAMETROS tokComa PARAMETRO 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 pars.hijos.add(par); RESULT = pars; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // METODO ::= tokVacio tokId tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // METODO ::= tokVacio tokId tokApar PARAMETROS tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(par);
                    aux.hijos.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION ::= TIPO tokId tokApar tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    aux.hijos.add(tipo);
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION ::= TIPO tokId tokApar PARAMETROS tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    aux.hijos.add(tipo);
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(par);
                    aux.hijos.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTINUAR ::= tokContinuar tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("CONTINUAR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ROMPER ::= tokRomper tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("ROMPER"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ROMPER",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MRETORNO ::= tokRetorno tokPcoma 
            {
              Nodo RESULT =null;
		 RESULT= new Nodo("RETORNO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MRETORNO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FRETORNO ::= tokRetorno EXP tokPcoma 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("RETORNO");
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FRETORNO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PRINCIPAL ::= tokVacio tokPrincipal tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux=new Nodo("PRINCIPAL");
                    aux.hijos.add(new Nodo("vacio"));
                    aux.hijos.add(new Nodo("Principal"));
                    aux.hijos.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= LLAMADA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); aux.hijos.add(new Nodo(id)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= tokFalso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); aux.hijos.add(new Nodo(falso)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= tokVerdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); aux.hijos.add(new Nodo(verdadero)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(new Nodo("-")); aux.hijos.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= tokChar 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String aux=caracter; aux=aux.replaceAll("\'",""); RESULT = new Nodo(aux); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= tokString 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String aux=cadena; aux=aux.replaceAll("\"",""); RESULT = new Nodo(aux); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= tokModulo 
            {
              Nodo RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); aux.hijos.add(new Nodo(mod)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux = new Nodo("EXP"); aux.hijos.add(new Nodo(num)); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP tokMenor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("<")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP tokMayor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo(">")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP tokMenorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("<=")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP tokMayorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo(">=")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP tokDiferente EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("!=")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP tokIgualIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("==")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= tokNot EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(new Nodo("!")); aux.hijos.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP tokAnd EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("&&")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP tokOr EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("||")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP tokPotencia EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("^")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP tokDiv EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("/")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP tokPor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("*")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("-")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP tokMas EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.hijos.add(a); aux.hijos.add(new Nodo("+")); aux.hijos.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIGNACION");
                    aux.hijos.add(new Nodo(id));
                    aux.hijos.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= TIPO LID tokIgual EXP 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("DECLARACION");
                    aux.hijos.add(tipo);
                    aux.hijos.add(lid);
                    aux.hijos.add(exp);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= TIPO LID 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    Nodo aux=new Nodo("DECLARACION");
                    aux.hijos.add(tipo);
                    aux.hijos.add(lid);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LID ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LISTA ID");
                    aux.hijos.add(new Nodo(id));
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LID ::= LID tokComa tokId 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 lid.hijos.add(new Nodo(id)); RESULT = lid; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= tokCaracter 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Caracter"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= tokEntero 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Entero"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= tokTexto 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Texto"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= tokBooleano 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Booleano"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= tokDecimal 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Decimal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FSENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FSENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FSENT ::= FRETORNO 
            {
              Nodo RESULT =null;
		int fretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FSENT ::= FMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FSENT ::= FHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FSENT ::= FPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FSENT ::= FCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FSENT ::= FES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FSENT ::= LLAMADA tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FSENTS ::= FSENT 
            {
              Nodo RESULT =null;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("FSENTS");
                    aux.hijos.add(fsent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FSENTS ::= FSENTS FSENT 
            {
              Nodo RESULT =null;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 fsents.hijos.add(fsent); RESULT = fsents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MSENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MSENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MSENT ::= MRETORNO 
            {
              Nodo RESULT =null;
		int mretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MSENT ::= MMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MSENT ::= MHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MSENT ::= MPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MSENT ::= MCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MSENT ::= MES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MSENT ::= LLAMADA tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MSENTS ::= MSENT 
            {
              Nodo RESULT =null;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("MSENTS");
                    aux.hijos.add(msent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MSENTS ::= MSENTS MSENT 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 msents.hijos.add(msent); RESULT = msents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= MRETORNO 
            {
              Nodo RESULT =null;
		int mretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= FRETORNO 
            {
              Nodo RESULT =null;
		int fretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= LLAMADA tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= MIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= HASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= PARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= CAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= ES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= FUNCION 
            {
              Nodo RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= METODO 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = metodo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= PRINCIPAL 
            {
              Nodo RESULT =null;
		int princileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int princiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo princi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = princi; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTS ::= SENT 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("SENTS");
                    aux.hijos.add(sent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTS ::= SENTS SENT 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 sents.hijos.add(sent); RESULT = sents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINIR ::= tokDefinir tokString 
            {
              Nodo RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String ruta="";
                    ruta=dir;
                    ruta=ruta.replaceAll("\"",""); 
                    RESULT = new Nodo(ruta); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFINIR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTAR ::= tokImportar tokId tokPunto tokExtension 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    String archivo=" ";
                    archivo=id+".asa";    
                    RESULT = new Nodo(archivo); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= DEFINIR tokPcoma 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("DEFINIR");
                    aux.hijos.add(def);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= IMPORTAR tokPcoma 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo imp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("IMPORTAR");
                    aux.hijos.add(imp);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADOS ::= ENCABEZADO 
            {
              Nodo RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo enc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ENCABEZADOS");
                    aux.hijos.add(enc);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADOS ::= ENCABEZADOS ENCABEZADO 
            {
              Nodo RESULT =null;
		int encsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int encsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo encs = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int encleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo enc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 encs.hijos.add(enc); RESULT=encs; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENCABEZADOS SENTS 
            {
              Nodo RESULT =null;
		int encsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int encsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo encs = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("Inicio");
                    aux.hijos.add(encs);
                    aux.hijos.add(sents);
                    Graficador g=new Graficador();
                    g.graficarAST(aux);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

