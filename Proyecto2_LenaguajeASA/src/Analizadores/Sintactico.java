
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 18 00:48:54 CST 2019
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 18 00:48:54 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\006\006\000\002\007\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\040\004\000\002\040\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\004\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\042\004\000\002\042\003\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\014\005\000\002\014\003\000\002\012\004\000" +
    "\002\012\006\000\002\013\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\011\011\000" +
    "\002\020\005\000\002\021\004\000\002\025\004\000\002" +
    "\026\004\000\002\017\012\000\002\017\011\000\002\016" +
    "\012\000\002\016\011\000\002\022\005\000\002\022\003" +
    "\000\002\023\004\000\002\024\006\000\002\024\005\000" +
    "\002\027\005\000\002\027\003\000\002\030\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\006\000\002\036" +
    "\006\000\002\037\003\000\002\037\003\000\002\031\006" +
    "\000\002\032\006\000\002\033\006\000\002\034\005\000" +
    "\002\044\011\000\002\044\015\000\002\045\011\000\002" +
    "\045\014\000\002\051\004\000\002\051\003\000\002\052" +
    "\006\000\002\046\015\000\002\047\011\000\002\050\011" +
    "\000\002\053\011\000\002\053\015\000\002\054\011\000" +
    "\002\054\014\000\002\060\004\000\002\060\003\000\002" +
    "\061\006\000\002\055\015\000\002\056\011\000\002\057" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\024\003\024\004\026\005\016\006\014\007" +
    "\012\010\006\011\022\012\021\072\004\001\002\000\004" +
    "\050\240\001\002\000\004\063\u0144\001\002\000\004\072" +
    "\uffc9\001\002\000\004\063\u0143\001\002\000\026\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\072\ufffa\001\002\000\026\002\ufff4\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\072\ufff4\001\002\000\004\072\uffca\001\002\000\004" +
    "\072\343\001\002\000\004\072\uffcb\001\002\000\026\002" +
    "\000\003\024\004\026\005\016\006\014\007\012\010\006" +
    "\011\022\012\021\072\004\001\002\000\004\071\341\001" +
    "\002\000\026\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\072\ufff6\001\002\000" +
    "\004\063\340\001\002\000\006\034\041\072\040\001\002" +
    "\000\004\072\uffc8\001\002\000\026\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\072\ufff7\001\002\000\006\062\037\063\036\001\002\000" +
    "\004\063\035\001\002\000\004\072\032\001\002\000\004" +
    "\002\031\001\002\000\026\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\072\ufff5" +
    "\001\002\000\004\002\001\001\002\000\004\066\033\001" +
    "\002\000\004\067\034\001\002\000\004\063\ufffd\001\002" +
    "\000\026\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\072\uffff\001\002\000\026" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\072\ufff3\001\002\000\026\002\ufff2" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\072\ufff2\001\002\000\004\057\321\001\002" +
    "\000\004\057\042\001\002\000\004\060\043\001\002\000" +
    "\004\061\044\001\002\000\046\003\065\006\014\007\012" +
    "\010\006\011\022\013\071\014\102\016\052\021\077\022" +
    "\103\023\053\024\101\025\067\026\056\027\050\030\054" +
    "\031\055\072\066\001\002\000\050\003\065\006\014\007" +
    "\012\010\006\011\022\013\071\014\102\016\052\021\077" +
    "\022\103\023\053\024\101\025\067\026\056\027\050\030" +
    "\054\031\055\062\320\072\066\001\002\000\004\072\312" +
    "\001\002\000\004\063\311\001\002\000\004\057\306\001" +
    "\002\000\004\063\305\001\002\000\004\057\265\001\002" +
    "\000\004\057\257\001\002\000\004\057\254\001\002\000" +
    "\004\057\252\001\002\000\004\057\247\001\002\000\004" +
    "\063\246\001\002\000\004\063\245\001\002\000\054\003" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\062\uffe5" +
    "\072\uffe5\001\002\000\054\003\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\062\uffeb\072\uffeb\001\002\000\004" +
    "\063\244\001\002\000\054\003\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\062\uffe4\072\uffe4\001\002\000\006" +
    "\062\243\063\242\001\002\000\006\050\240\057\161\001" +
    "\002\000\004\063\237\001\002\000\004\063\236\001\002" +
    "\000\004\063\235\001\002\000\004\063\234\001\002\000" +
    "\054\003\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\062\uffe9\072\uffe9\001\002\000\054\003\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\062\ufff0\072\ufff0\001\002" +
    "\000\054\003\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013" +
    "\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\062\uffe8\072\uffe8\001\002\000\054\003\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\062\uffe6\072\uffe6\001" +
    "\002\000\004\057\210\001\002\000\054\003\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\062\uffea\072\uffea\001" +
    "\002\000\004\063\207\001\002\000\004\057\175\001\002" +
    "\000\004\057\105\001\002\000\054\003\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\013\uffec\014\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\062\uffec\072\uffec\001\002" +
    "\000\022\032\106\033\114\037\107\042\112\057\111\070" +
    "\117\071\116\072\113\001\002\000\046\035\uffaf\036\uffaf" +
    "\040\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\001\002\000\022\032\106\033" +
    "\114\037\107\042\112\057\111\070\117\071\116\072\113" +
    "\001\002\000\046\035\uffac\036\uffac\040\uffac\042\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\060\uffac\063\uffac\064\uffac\065" +
    "\uffac\001\002\000\022\032\106\033\114\037\107\042\112" +
    "\057\111\070\117\071\116\072\113\001\002\000\022\032" +
    "\106\033\114\037\107\042\112\057\111\070\117\071\116" +
    "\072\113\001\002\000\050\035\uffad\036\uffad\040\uffad\042" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\161\060\uffad\063" +
    "\uffad\064\uffad\065\uffad\001\002\000\046\035\uffae\036\uffae" +
    "\040\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae" +
    "\063\uffae\064\uffae\065\uffae\001\002\000\040\035\132\036" +
    "\130\040\136\042\125\044\133\045\121\046\122\047\124" +
    "\051\131\052\123\053\135\054\127\055\126\056\120\060" +
    "\134\001\002\000\046\035\uffb1\036\uffb1\040\uffb1\042\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\060\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\001\002\000\046\035\uffb2\036\uffb2\040\uffb2\042" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\001\002\000\022\032\106\033\114\037\107" +
    "\042\112\057\111\070\117\071\116\072\113\001\002\000" +
    "\022\032\106\033\114\037\107\042\112\057\111\070\117" +
    "\071\116\072\113\001\002\000\022\032\106\033\114\037" +
    "\107\042\112\057\111\070\117\071\116\072\113\001\002" +
    "\000\022\032\106\033\114\037\107\042\112\057\111\070" +
    "\117\071\116\072\113\001\002\000\022\032\106\033\114" +
    "\037\107\042\112\057\111\070\117\071\116\072\113\001" +
    "\002\000\022\032\106\033\114\037\107\042\112\057\111" +
    "\070\117\071\116\072\113\001\002\000\022\032\106\033" +
    "\114\037\107\042\112\057\111\070\117\071\116\072\113" +
    "\001\002\000\022\032\106\033\114\037\107\042\112\057" +
    "\111\070\117\071\116\072\113\001\002\000\022\032\106" +
    "\033\114\037\107\042\112\057\111\070\117\071\116\072" +
    "\113\001\002\000\022\032\106\033\114\037\107\042\112" +
    "\057\111\070\117\071\116\072\113\001\002\000\022\032" +
    "\106\033\114\037\107\042\112\057\111\070\117\071\116" +
    "\072\113\001\002\000\022\032\106\033\114\037\107\042" +
    "\112\057\111\070\117\071\116\072\113\001\002\000\004" +
    "\061\141\001\002\000\022\032\106\033\114\037\107\042" +
    "\112\057\111\070\117\071\116\072\113\001\002\000\022" +
    "\032\106\033\114\037\107\042\112\057\111\070\117\071" +
    "\116\072\113\001\002\000\046\035\132\036\130\040\uffc2" +
    "\042\uffc2\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\060\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\032\035\132\036\130\040" +
    "\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\060\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\001\002\000\046\003\065\006" +
    "\014\007\012\010\006\011\022\013\071\014\102\016\052" +
    "\021\077\022\103\023\053\024\101\025\067\026\056\027" +
    "\050\030\054\031\055\072\066\001\002\000\050\003\065" +
    "\006\014\007\012\010\006\011\022\013\071\014\102\016" +
    "\052\021\077\022\103\023\053\024\101\025\067\026\056" +
    "\027\050\030\054\031\055\062\143\072\066\001\002\000" +
    "\054\003\uff88\006\uff88\007\uff88\010\uff88\011\uff88\013\uff88" +
    "\014\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\062\uff88\072\uff88\001\002\000\054\003\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\062\ufff1\072\ufff1\001\002" +
    "\000\046\035\132\036\130\040\uffc0\042\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\124\051\131\052\123\053\135\054\127" +
    "\055\126\056\120\060\uffc0\063\uffc0\064\uffc0\065\uffc0\001" +
    "\002\000\046\035\uffbc\036\130\040\uffbc\042\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\032\035\132\036\130\040\uffb9\042\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\060\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\001\002\000\046\035\uffbb\036\uffbb\040\uffbb\042" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\001\002\000\032\035\132\036\130\040\uffb4" +
    "\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\060\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\001\002\000\032\035\132\036\130" +
    "\040\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\060" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000\046\035\132" +
    "\036\130\040\uffc1\042\uffc1\044\133\045\121\046\122\047" +
    "\124\051\131\052\123\053\135\054\127\055\126\056\120" +
    "\060\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002\000\046\035" +
    "\132\036\130\040\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\051\131\052\123\053\135\054\127\055\126\056" +
    "\120\060\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\032" +
    "\035\132\036\130\040\uffb8\042\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\060\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002" +
    "\000\046\035\132\036\130\040\uffbe\042\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\124\051\131\052\123\053\135\054\127" +
    "\055\126\056\120\060\uffbe\063\uffbe\064\uffbe\065\uffbe\001" +
    "\002\000\046\035\132\036\130\040\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\124\051\131\052\123\053\135\054" +
    "\127\055\126\056\120\060\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\001\002\000\032\035\132\036\130\040\uffb6\042\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\060\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\024\032\106\033\114\037\107\042" +
    "\112\057\111\060\164\070\117\071\116\072\113\001\002" +
    "\000\006\060\uff9c\065\uff9c\001\002\000\006\060\166\065" +
    "\167\001\002\000\046\035\uff9e\036\uff9e\040\uff9e\042\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\001\002\000\042\035\132\036\130\040\136\042" +
    "\125\044\133\045\121\046\122\047\124\051\131\052\123" +
    "\053\135\054\127\055\126\056\120\060\uff9b\065\uff9b\001" +
    "\002\000\046\035\uff9f\036\uff9f\040\uff9f\042\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\001\002\000\022\032\106\033\114\037\107\042\112\057" +
    "\111\070\117\071\116\072\113\001\002\000\006\060\uff9d" +
    "\065\uff9d\001\002\000\046\035\132\036\130\040\uffb0\042" +
    "\uffb0\044\133\045\121\046\122\047\124\051\131\052\123" +
    "\053\135\054\127\055\126\056\120\060\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\001\002\000\040\035\132\036\130\040\136" +
    "\042\125\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\060\173\001\002" +
    "\000\046\035\uffb3\036\uffb3\040\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\060\uffb3\063\uffb3\064\uffb3\065\uffb3\001" +
    "\002\000\046\035\uffba\036\uffba\040\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\060\uffba\063\uffba\064\uffba\065\uffba" +
    "\001\002\000\022\032\106\033\114\037\107\042\112\057" +
    "\111\070\117\071\116\072\113\001\002\000\040\035\132" +
    "\036\130\040\136\042\125\044\133\045\121\046\122\047" +
    "\124\051\131\052\123\053\135\054\127\055\126\056\120" +
    "\060\177\001\002\000\004\061\200\001\002\000\046\003" +
    "\065\006\014\007\012\010\006\011\022\013\071\014\102" +
    "\016\052\021\077\022\103\023\053\024\101\025\067\026" +
    "\056\027\050\030\054\031\055\072\066\001\002\000\050" +
    "\003\065\006\014\007\012\010\006\011\022\013\071\014" +
    "\102\016\052\021\077\022\103\023\053\024\101\025\067" +
    "\026\056\027\050\030\054\031\055\062\202\072\066\001" +
    "\002\000\056\003\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\013\uff90\014\uff90\015\203\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\062\uff90\072\uff90\001\002\000\004\061" +
    "\204\001\002\000\046\003\065\006\014\007\012\010\006" +
    "\011\022\013\071\014\102\016\052\021\077\022\103\023" +
    "\053\024\101\025\067\026\056\027\050\030\054\031\055" +
    "\072\066\001\002\000\050\003\065\006\014\007\012\010" +
    "\006\011\022\013\071\014\102\016\052\021\077\022\103" +
    "\023\053\024\101\025\067\026\056\027\050\030\054\031" +
    "\055\062\206\072\066\001\002\000\054\003\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\013\uff8f\014\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\062\uff8f\072\uff8f\001" +
    "\002\000\054\003\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\013\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\062\uffa8\072\uffa8\001\002\000\006\006\211\011" +
    "\212\001\002\000\004\072\231\001\002\000\004\072\226" +
    "\001\002\000\004\063\214\001\002\000\022\032\106\033" +
    "\114\037\107\042\112\057\111\070\117\071\116\072\113" +
    "\001\002\000\040\035\132\036\130\040\136\042\125\044" +
    "\133\045\121\046\122\047\124\051\131\052\123\053\135" +
    "\054\127\055\126\056\120\063\216\001\002\000\006\041" +
    "\217\043\221\001\002\000\004\060\uff96\001\002\000\004" +
    "\060\222\001\002\000\004\060\uff95\001\002\000\004\061" +
    "\223\001\002\000\046\003\065\006\014\007\012\010\006" +
    "\011\022\013\071\014\102\016\052\021\077\022\103\023" +
    "\053\024\101\025\067\026\056\027\050\030\054\031\055" +
    "\072\066\001\002\000\050\003\065\006\014\007\012\010" +
    "\006\011\022\013\071\014\102\016\052\021\077\022\103" +
    "\023\053\024\101\025\067\026\056\027\050\030\054\031" +
    "\055\062\225\072\066\001\002\000\054\003\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\013\uff89\014\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\062\uff89\072\uff89\001" +
    "\002\000\004\050\227\001\002\000\022\032\106\033\114" +
    "\037\107\042\112\057\111\070\117\071\116\072\113\001" +
    "\002\000\040\035\132\036\130\040\136\042\125\044\133" +
    "\045\121\046\122\047\124\051\131\052\123\053\135\054" +
    "\127\055\126\056\120\063\uff98\001\002\000\004\050\232" +
    "\001\002\000\022\032\106\033\114\037\107\042\112\057" +
    "\111\070\117\071\116\072\113\001\002\000\040\035\132" +
    "\036\130\040\136\042\125\044\133\045\121\046\122\047" +
    "\124\051\131\052\123\053\135\054\127\055\126\056\120" +
    "\063\uff97\001\002\000\054\003\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\062\uffef\072\uffef\001\002\000\054" +
    "\003\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\014" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\062" +
    "\uffa9\072\uffa9\001\002\000\054\003\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\013\uffee\014\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\062\uffee\072\uffee\001\002\000" +
    "\054\003\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\062\uffa7\072\uffa7\001\002\000\022\032\106\033\114\037" +
    "\107\042\112\057\111\070\117\071\116\072\113\001\002" +
    "\000\040\035\132\036\130\040\136\042\125\044\133\045" +
    "\121\046\122\047\124\051\131\052\123\053\135\054\127" +
    "\055\126\056\120\063\uffc3\001\002\000\054\003\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\062\uffe0\072\uffe0" +
    "\001\002\000\054\003\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\062\uffdf\072\uffdf\001\002\000\054\003\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\062\uffe3\072" +
    "\uffe3\001\002\000\054\003\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\062\uffe1\072\uffe1\001\002\000\054\003" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\062\uffe2" +
    "\072\uffe2\001\002\000\022\032\106\033\114\037\107\042" +
    "\112\057\111\070\117\071\116\072\113\001\002\000\040" +
    "\035\132\036\130\040\136\042\125\044\133\045\121\046" +
    "\122\047\124\051\131\052\123\053\135\054\127\055\126" +
    "\056\120\060\251\001\002\000\004\063\uff94\001\002\000" +
    "\004\060\253\001\002\000\004\063\uff91\001\002\000\022" +
    "\032\106\033\114\037\107\042\112\057\111\070\117\071" +
    "\116\072\113\001\002\000\040\035\132\036\130\040\136" +
    "\042\125\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\060\256\001\002" +
    "\000\004\063\uff92\001\002\000\022\032\106\033\114\037" +
    "\107\042\112\057\111\070\117\071\116\072\113\001\002" +
    "\000\040\035\132\036\130\040\136\042\125\044\133\045" +
    "\121\046\122\047\124\051\131\052\123\053\135\054\127" +
    "\055\126\056\120\060\261\001\002\000\004\061\262\001" +
    "\002\000\046\003\065\006\014\007\012\010\006\011\022" +
    "\013\071\014\102\016\052\021\077\022\103\023\053\024" +
    "\101\025\067\026\056\027\050\030\054\031\055\072\066" +
    "\001\002\000\050\003\065\006\014\007\012\010\006\011" +
    "\022\013\071\014\102\016\052\021\077\022\103\023\053" +
    "\024\101\025\067\026\056\027\050\030\054\031\055\062" +
    "\264\072\066\001\002\000\054\003\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\062\uff87\072\uff87\001\002\000" +
    "\022\032\106\033\114\037\107\042\112\057\111\070\117" +
    "\071\116\072\113\001\002\000\040\035\132\036\130\040" +
    "\136\042\125\044\133\045\121\046\122\047\124\051\131" +
    "\052\123\053\135\054\127\055\126\056\120\060\267\001" +
    "\002\000\004\061\270\001\002\000\004\020\273\001\002" +
    "\000\010\017\277\020\273\062\300\001\002\000\010\017" +
    "\uff8b\020\uff8b\062\uff8b\001\002\000\022\032\106\033\114" +
    "\037\107\042\112\057\111\070\117\071\116\072\113\001" +
    "\002\000\040\035\132\036\130\040\136\042\125\044\133" +
    "\045\121\046\122\047\124\051\131\052\123\053\135\054" +
    "\127\055\126\056\120\064\275\001\002\000\046\003\065" +
    "\006\014\007\012\010\006\011\022\013\071\014\102\016" +
    "\052\021\077\022\103\023\053\024\101\025\067\026\056" +
    "\027\050\030\054\031\055\072\066\001\002\000\054\003" +
    "\065\006\014\007\012\010\006\011\022\013\071\014\102" +
    "\016\052\017\uff8a\020\uff8a\021\077\022\103\023\053\024" +
    "\101\025\067\026\056\027\050\030\054\031\055\062\uff8a" +
    "\072\066\001\002\000\004\064\302\001\002\000\054\003" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\013\uff8e\014\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\062\uff8e" +
    "\072\uff8e\001\002\000\010\017\uff8c\020\uff8c\062\uff8c\001" +
    "\002\000\046\003\065\006\014\007\012\010\006\011\022" +
    "\013\071\014\102\016\052\021\077\022\103\023\053\024" +
    "\101\025\067\026\056\027\050\030\054\031\055\072\066" +
    "\001\002\000\050\003\065\006\014\007\012\010\006\011" +
    "\022\013\071\014\102\016\052\021\077\022\103\023\053" +
    "\024\101\025\067\026\056\027\050\030\054\031\055\062" +
    "\304\072\066\001\002\000\054\003\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\062\uff8d\072\uff8d\001\002\000" +
    "\054\003\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\062\uffe7\072\uffe7\001\002\000\004\072\307\001\002\000" +
    "\004\060\310\001\002\000\004\063\uff93\001\002\000\054" +
    "\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\062" +
    "\uffed\072\uffed\001\002\000\010\050\uffc6\063\uffc6\065\uffc6" +
    "\001\002\000\010\050\315\063\uffc5\065\314\001\002\000" +
    "\004\072\317\001\002\000\022\032\106\033\114\037\107" +
    "\042\112\057\111\070\117\071\116\072\113\001\002\000" +
    "\040\035\132\036\130\040\136\042\125\044\133\045\121" +
    "\046\122\047\124\051\131\052\123\053\135\054\127\055" +
    "\126\056\120\063\uffc4\001\002\000\010\050\uffc7\063\uffc7" +
    "\065\uffc7\001\002\000\026\002\uffab\003\uffab\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\072\uffab" +
    "\001\002\000\014\006\014\007\012\010\006\011\022\060" +
    "\323\001\002\000\006\060\uffa1\065\uffa1\001\002\000\004" +
    "\061\335\001\002\000\006\060\327\065\330\001\002\000" +
    "\004\072\326\001\002\000\006\060\uffa0\065\uffa0\001\002" +
    "\000\004\061\332\001\002\000\012\006\014\007\012\010" +
    "\006\011\022\001\002\000\006\060\uffa2\065\uffa2\001\002" +
    "\000\046\003\065\006\014\007\012\010\006\011\022\013" +
    "\071\014\102\016\052\021\077\022\103\023\053\024\101" +
    "\025\067\026\056\027\050\030\054\031\055\072\066\001" +
    "\002\000\050\003\065\006\014\007\012\010\006\011\022" +
    "\013\071\014\102\016\052\021\077\022\103\023\053\024" +
    "\101\025\067\026\056\027\050\030\054\031\055\062\334" +
    "\072\066\001\002\000\026\002\uffa4\003\uffa4\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\072\uffa4" +
    "\001\002\000\046\003\065\006\014\007\012\010\006\011" +
    "\022\013\071\014\102\016\052\021\077\022\103\023\053" +
    "\024\101\025\067\026\056\027\050\030\054\031\055\072" +
    "\066\001\002\000\050\003\065\006\014\007\012\010\006" +
    "\011\022\013\071\014\102\016\052\021\077\022\103\023" +
    "\053\024\101\025\067\026\056\027\050\030\054\031\055" +
    "\062\337\072\066\001\002\000\026\002\uffa3\003\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\072\uffa3\001\002\000\026\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\072\ufff8" +
    "\001\002\000\004\063\ufffc\001\002\000\026\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\072\ufffb\001\002\000\012\050\uffc6\057\344\063" +
    "\uffc6\065\uffc6\001\002\000\014\006\014\007\012\010\006" +
    "\011\022\060\345\001\002\000\004\061\u0140\001\002\000" +
    "\006\060\347\065\330\001\002\000\004\061\350\001\002" +
    "\000\046\003\364\006\014\007\012\010\006\011\022\013" +
    "\367\014\377\016\354\021\372\022\u0100\023\356\024\101" +
    "\025\067\026\056\027\050\030\054\031\055\072\066\001" +
    "\002\000\054\003\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\062\uffd9\072\uffd9\001\002\000\004\063\u013f\001" +
    "\002\000\004\063\u013e\001\002\000\004\057\u012c\001\002" +
    "\000\054\003\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\062\uffd6\072\uffd6\001\002\000\004\057\u0126\001\002" +
    "\000\004\063\u0125\001\002\000\004\063\u0124\001\002\000" +
    "\050\003\364\006\014\007\012\010\006\011\022\013\367" +
    "\014\377\016\354\021\372\022\u0100\023\356\024\101\025" +
    "\067\026\056\027\050\030\054\031\055\062\u0123\072\066" +
    "\001\002\000\054\003\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\062\uffd2\072\uffd2\001\002\000\004\063\u0122" +
    "\001\002\000\006\062\u0121\063\u0120\001\002\000\054\003" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\062\uffdd" +
    "\072\uffdd\001\002\000\004\063\u011f\001\002\000\022\032" +
    "\106\033\114\037\107\042\112\057\111\070\117\071\116" +
    "\072\113\001\002\000\004\063\u011c\001\002\000\054\003" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\062\uffd3" +
    "\072\uffd3\001\002\000\004\057\u0112\001\002\000\054\003" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\062\uffd7" +
    "\072\uffd7\001\002\000\054\003\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\062\uffd5\072\uffd5\001\002\000\054" +
    "\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\062" +
    "\uffd8\072\uffd8\001\002\000\054\003\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\062\uffd1\072\uffd1\001\002\000" +
    "\004\057\u0108\001\002\000\004\057\u0101\001\002\000\022" +
    "\032\106\033\114\037\107\042\112\057\111\070\117\071" +
    "\116\072\113\001\002\000\040\035\132\036\130\040\136" +
    "\042\125\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\060\u0103\001\002" +
    "\000\004\061\u0104\001\002\000\046\003\364\006\014\007" +
    "\012\010\006\011\022\013\367\014\377\016\354\021\372" +
    "\022\u0100\023\356\024\101\025\067\026\056\027\050\030" +
    "\054\031\055\072\066\001\002\000\050\003\364\006\014" +
    "\007\012\010\006\011\022\013\367\014\377\016\354\021" +
    "\372\022\u0100\023\356\024\101\025\067\026\056\027\050" +
    "\030\054\031\055\062\u0106\072\066\001\002\000\054\003" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e\014\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\062\uff7e" +
    "\072\uff7e\001\002\000\054\003\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\062\uffde\072\uffde\001\002\000\022" +
    "\032\106\033\114\037\107\042\112\057\111\070\117\071" +
    "\116\072\113\001\002\000\040\035\132\036\130\040\136" +
    "\042\125\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\060\u010a\001\002" +
    "\000\004\061\u010b\001\002\000\046\003\364\006\014\007" +
    "\012\010\006\011\022\013\367\014\377\016\354\021\372" +
    "\022\u0100\023\356\024\101\025\067\026\056\027\050\030" +
    "\054\031\055\072\066\001\002\000\050\003\364\006\014" +
    "\007\012\010\006\011\022\013\367\014\377\016\354\021" +
    "\372\022\u0100\023\356\024\101\025\067\026\056\027\050" +
    "\030\054\031\055\062\u010d\072\066\001\002\000\056\003" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\013\uff86\014\uff86" +
    "\015\u010e\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\062\uff86\072\uff86\001\002\000\004\061\u010f\001\002\000" +
    "\046\003\364\006\014\007\012\010\006\011\022\013\367" +
    "\014\377\016\354\021\372\022\u0100\023\356\024\101\025" +
    "\067\026\056\027\050\030\054\031\055\072\066\001\002" +
    "\000\050\003\364\006\014\007\012\010\006\011\022\013" +
    "\367\014\377\016\354\021\372\022\u0100\023\356\024\101" +
    "\025\067\026\056\027\050\030\054\031\055\062\u0111\072" +
    "\066\001\002\000\054\003\uff85\006\uff85\007\uff85\010\uff85" +
    "\011\uff85\013\uff85\014\uff85\016\uff85\017\uff85\020\uff85\021" +
    "\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\062\uff85\072\uff85\001\002\000\006\006" +
    "\211\011\212\001\002\000\004\063\u0114\001\002\000\022" +
    "\032\106\033\114\037\107\042\112\057\111\070\117\071" +
    "\116\072\113\001\002\000\040\035\132\036\130\040\136" +
    "\042\125\044\133\045\121\046\122\047\124\051\131\052" +
    "\123\053\135\054\127\055\126\056\120\063\u0116\001\002" +
    "\000\006\041\217\043\221\001\002\000\004\060\u0118\001" +
    "\002\000\004\061\u0119\001\002\000\046\003\364\006\014" +
    "\007\012\010\006\011\022\013\367\014\377\016\354\021" +
    "\372\022\u0100\023\356\024\101\025\067\026\056\027\050" +
    "\030\054\031\055\072\066\001\002\000\050\003\364\006" +
    "\014\007\012\010\006\011\022\013\367\014\377\016\354" +
    "\021\372\022\u0100\023\356\024\101\025\067\026\056\027" +
    "\050\030\054\031\055\062\u011b\072\066\001\002\000\054" +
    "\003\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\uff7f\014" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\062" +
    "\uff7f\072\uff7f\001\002\000\054\003\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\062\uffdc\072\uffdc\001\002\000" +
    "\040\035\132\036\130\040\136\042\125\044\133\045\121" +
    "\046\122\047\124\051\131\052\123\053\135\054\127\055" +
    "\126\056\120\063\u011e\001\002\000\054\003\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\062\uffaa\072\uffaa\001" +
    "\002\000\054\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\062\uffdb\072\uffdb\001\002\000\054\003\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\062\uffcd\072\uffcd" +
    "\001\002\000\054\003\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\062\uffcc\072\uffcc\001\002\000\054\003\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\062\uffd0\072" +
    "\uffd0\001\002\000\026\002\uffa6\003\uffa6\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\072\uffa6\001" +
    "\002\000\054\003\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\062\uffce\072\uffce\001\002\000\054\003\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\062\uffcf\072\uffcf" +
    "\001\002\000\022\032\106\033\114\037\107\042\112\057" +
    "\111\070\117\071\116\072\113\001\002\000\040\035\132" +
    "\036\130\040\136\042\125\044\133\045\121\046\122\047" +
    "\124\051\131\052\123\053\135\054\127\055\126\056\120" +
    "\060\u0128\001\002\000\004\061\u0129\001\002\000\046\003" +
    "\364\006\014\007\012\010\006\011\022\013\367\014\377" +
    "\016\354\021\372\022\u0100\023\356\024\101\025\067\026" +
    "\056\027\050\030\054\031\055\072\066\001\002\000\050" +
    "\003\364\006\014\007\012\010\006\011\022\013\367\014" +
    "\377\016\354\021\372\022\u0100\023\356\024\101\025\067" +
    "\026\056\027\050\030\054\031\055\062\u012b\072\066\001" +
    "\002\000\054\003\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d" +
    "\013\uff7d\014\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d" +
    "\031\uff7d\062\uff7d\072\uff7d\001\002\000\022\032\106\033" +
    "\114\037\107\042\112\057\111\070\117\071\116\072\113" +
    "\001\002\000\040\035\132\036\130\040\136\042\125\044" +
    "\133\045\121\046\122\047\124\051\131\052\123\053\135" +
    "\054\127\055\126\056\120\060\u012e\001\002\000\004\061" +
    "\u012f\001\002\000\004\020\u0132\001\002\000\010\017\uff81" +
    "\020\uff81\062\uff81\001\002\000\010\017\u0139\020\u0132\062" +
    "\u013a\001\002\000\006\070\u0133\071\u0134\001\002\000\004" +
    "\064\uff9a\001\002\000\004\064\uff99\001\002\000\004\064" +
    "\u0136\001\002\000\046\003\364\006\014\007\012\010\006" +
    "\011\022\013\367\014\377\016\354\021\372\022\u0100\023" +
    "\356\024\101\025\067\026\056\027\050\030\054\031\055" +
    "\072\066\001\002\000\054\003\364\006\014\007\012\010" +
    "\006\011\022\013\367\014\377\016\354\017\uff80\020\uff80" +
    "\021\372\022\u0100\023\356\024\101\025\067\026\056\027" +
    "\050\030\054\031\055\062\uff80\072\066\001\002\000\010" +
    "\017\uff82\020\uff82\062\uff82\001\002\000\004\064\u013b\001" +
    "\002\000\054\003\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\013\uff84\014\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\062\uff84\072\uff84\001\002\000\046\003\364\006" +
    "\014\007\012\010\006\011\022\013\367\014\377\016\354" +
    "\021\372\022\u0100\023\356\024\101\025\067\026\056\027" +
    "\050\030\054\031\055\072\066\001\002\000\050\003\364" +
    "\006\014\007\012\010\006\011\022\013\367\014\377\016" +
    "\354\021\372\022\u0100\023\356\024\101\025\067\026\056" +
    "\027\050\030\054\031\055\062\u013d\072\066\001\002\000" +
    "\054\003\uff83\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83" +
    "\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\062\uff83\072\uff83\001\002\000\054\003\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\062\uffd4\072\uffd4\001\002" +
    "\000\054\003\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013" +
    "\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\062\uffda\072\uffda\001\002\000\046\003\364\006\014" +
    "\007\012\010\006\011\022\013\367\014\377\016\354\021" +
    "\372\022\u0100\023\356\024\101\025\067\026\056\027\050" +
    "\030\054\031\055\072\066\001\002\000\050\003\364\006" +
    "\014\007\012\010\006\011\022\013\367\014\377\016\354" +
    "\021\372\022\u0100\023\356\024\101\025\067\026\056\027" +
    "\050\030\054\031\055\062\u0142\072\066\001\002\000\026" +
    "\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\072\uffa5\001\002\000\026\002\ufff9" +
    "\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\072\ufff9\001\002\000\026\002\ufffe\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\072\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\032\002\026\003\010\004\014\005\007\006" +
    "\024\007\004\010\012\011\022\012\006\013\017\016\016" +
    "\017\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\312\001\001\000" +
    "\002\001\001\000\026\003\010\005\341\006\024\007\004" +
    "\010\012\011\022\012\006\013\017\016\016\017\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\010\045\012\071\013\067\021\063\024\046\025\075\026" +
    "\060\031\050\032\062\033\056\034\057\040\044\041\073" +
    "\044\103\045\061\046\077\047\072\050\074\001\001\000" +
    "\044\010\045\012\071\013\067\021\063\024\046\025\075" +
    "\026\060\031\050\032\062\033\056\034\057\041\143\044" +
    "\103\045\061\046\077\047\072\050\074\001\001\000\004" +
    "\014\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\114\024\107" +
    "\001\001\000\002\001\001\000\006\015\173\024\107\001" +
    "\001\000\002\001\001\000\006\015\171\024\107\001\001" +
    "\000\006\015\170\024\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\157\024\107\001\001\000\006\015" +
    "\156\024\107\001\001\000\006\015\155\024\107\001\001" +
    "\000\006\015\154\024\107\001\001\000\006\015\153\024" +
    "\107\001\001\000\006\015\152\024\107\001\001\000\006" +
    "\015\151\024\107\001\001\000\006\015\150\024\107\001" +
    "\001\000\006\015\147\024\107\001\001\000\006\015\146" +
    "\024\107\001\001\000\006\015\145\024\107\001\001\000" +
    "\006\015\144\024\107\001\001\000\002\001\001\000\006" +
    "\015\137\024\107\001\001\000\006\015\136\024\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\010\045" +
    "\012\071\013\067\021\063\024\046\025\075\026\060\031" +
    "\050\032\062\033\056\034\057\040\141\041\073\044\103" +
    "\045\061\046\077\047\072\050\074\001\001\000\044\010" +
    "\045\012\071\013\067\021\063\024\046\025\075\026\060" +
    "\031\050\032\062\033\056\034\057\041\143\044\103\045" +
    "\061\046\077\047\072\050\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\164\024\107\027\162\030\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\164\024\107\030" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\175\024\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\010\045\012\071\013\067\021\063\024\046\025" +
    "\075\026\060\031\050\032\062\033\056\034\057\040\200" +
    "\041\073\044\103\045\061\046\077\047\072\050\074\001" +
    "\001\000\044\010\045\012\071\013\067\021\063\024\046" +
    "\025\075\026\060\031\050\032\062\033\056\034\057\041" +
    "\143\044\103\045\061\046\077\047\072\050\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\010\045\012" +
    "\071\013\067\021\063\024\046\025\075\026\060\031\050" +
    "\032\062\033\056\034\057\040\204\041\073\044\103\045" +
    "\061\046\077\047\072\050\074\001\001\000\044\010\045" +
    "\012\071\013\067\021\063\024\046\025\075\026\060\031" +
    "\050\032\062\033\056\034\057\041\143\044\103\045\061" +
    "\046\077\047\072\050\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\214\024" +
    "\107\001\001\000\002\001\001\000\004\037\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\010\045\012\071\013\067\021\063" +
    "\024\046\025\075\026\060\031\050\032\062\033\056\034" +
    "\057\040\223\041\073\044\103\045\061\046\077\047\072" +
    "\050\074\001\001\000\044\010\045\012\071\013\067\021" +
    "\063\024\046\025\075\026\060\031\050\032\062\033\056" +
    "\034\057\041\143\044\103\045\061\046\077\047\072\050" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\227\024\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\232\024\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\240\024\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\247" +
    "\024\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\254\024\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\257\024\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\010\045\012\071\013\067\021\063\024\046\025" +
    "\075\026\060\031\050\032\062\033\056\034\057\040\262" +
    "\041\073\044\103\045\061\046\077\047\072\050\074\001" +
    "\001\000\044\010\045\012\071\013\067\021\063\024\046" +
    "\025\075\026\060\031\050\032\062\033\056\034\057\041" +
    "\143\044\103\045\061\046\077\047\072\050\074\001\001" +
    "\000\002\001\001\000\006\015\265\024\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\270\052\271" +
    "\001\001\000\004\052\300\001\001\000\002\001\001\000" +
    "\006\015\273\024\107\001\001\000\002\001\001\000\046" +
    "\010\045\012\071\013\067\021\063\024\046\025\075\026" +
    "\060\031\050\032\062\033\056\034\057\040\275\041\073" +
    "\044\103\045\061\046\077\047\072\050\074\001\001\000" +
    "\044\010\045\012\071\013\067\021\063\024\046\025\075" +
    "\026\060\031\050\032\062\033\056\034\057\041\143\044" +
    "\103\045\061\046\077\047\072\050\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\010" +
    "\045\012\071\013\067\021\063\024\046\025\075\026\060" +
    "\031\050\032\062\033\056\034\057\040\302\041\073\044" +
    "\103\045\061\046\077\047\072\050\074\001\001\000\044" +
    "\010\045\012\071\013\067\021\063\024\046\025\075\026" +
    "\060\031\050\032\062\033\056\034\057\041\143\044\103" +
    "\045\061\046\077\047\072\050\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\315\024\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\324\022\323\023\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\324" +
    "\023\330\001\001\000\002\001\001\000\046\010\045\012" +
    "\071\013\067\021\063\024\046\025\075\026\060\031\050" +
    "\032\062\033\056\034\057\040\332\041\073\044\103\045" +
    "\061\046\077\047\072\050\074\001\001\000\044\010\045" +
    "\012\071\013\067\021\063\024\046\025\075\026\060\031" +
    "\050\032\062\033\056\034\057\041\143\044\103\045\061" +
    "\046\077\047\072\050\074\001\001\000\002\001\001\000" +
    "\046\010\045\012\071\013\067\021\063\024\046\025\075" +
    "\026\060\031\050\032\062\033\056\034\057\040\335\041" +
    "\073\044\103\045\061\046\077\047\072\050\074\001\001" +
    "\000\044\010\045\012\071\013\067\021\063\024\046\025" +
    "\075\026\060\031\050\032\062\033\056\034\057\041\143" +
    "\044\103\045\061\046\077\047\072\050\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\324\022\345\023" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\010\045\012\367\013\365\020\375\024" +
    "\351\025\370\026\361\031\352\032\362\033\356\034\357" +
    "\042\360\043\364\053\350\054\374\055\372\056\354\057" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\010\045" +
    "\012\367\013\365\020\375\024\351\025\370\026\361\031" +
    "\352\032\362\033\356\034\357\043\u0106\053\350\054\374" +
    "\055\372\056\354\057\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u011c\024\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u0101\024\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\010" +
    "\045\012\367\013\365\020\375\024\351\025\370\026\361" +
    "\031\352\032\362\033\356\034\357\042\u0104\043\364\053" +
    "\350\054\374\055\372\056\354\057\373\001\001\000\044" +
    "\010\045\012\367\013\365\020\375\024\351\025\370\026" +
    "\361\031\352\032\362\033\356\034\357\043\u0106\053\350" +
    "\054\374\055\372\056\354\057\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0108\024\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\010\045\012" +
    "\367\013\365\020\375\024\351\025\370\026\361\031\352" +
    "\032\362\033\356\034\357\042\u010b\043\364\053\350\054" +
    "\374\055\372\056\354\057\373\001\001\000\044\010\045" +
    "\012\367\013\365\020\375\024\351\025\370\026\361\031" +
    "\352\032\362\033\356\034\357\043\u0106\053\350\054\374" +
    "\055\372\056\354\057\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\010\045\012\367\013\365\020\375" +
    "\024\351\025\370\026\361\031\352\032\362\033\356\034" +
    "\357\042\u010f\043\364\053\350\054\374\055\372\056\354" +
    "\057\373\001\001\000\044\010\045\012\367\013\365\020" +
    "\375\024\351\025\370\026\361\031\352\032\362\033\356" +
    "\034\357\043\u0106\053\350\054\374\055\372\056\354\057" +
    "\373\001\001\000\002\001\001\000\004\036\u0112\001\001" +
    "\000\002\001\001\000\006\015\u0114\024\107\001\001\000" +
    "\002\001\001\000\004\037\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\010\045\012\367\013\365\020" +
    "\375\024\351\025\370\026\361\031\352\032\362\033\356" +
    "\034\357\042\u0119\043\364\053\350\054\374\055\372\056" +
    "\354\057\373\001\001\000\044\010\045\012\367\013\365" +
    "\020\375\024\351\025\370\026\361\031\352\032\362\033" +
    "\356\034\357\043\u0106\053\350\054\374\055\372\056\354" +
    "\057\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u0126" +
    "\024\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\010\045\012\367\013\365\020\375\024\351\025\370" +
    "\026\361\031\352\032\362\033\356\034\357\042\u0129\043" +
    "\364\053\350\054\374\055\372\056\354\057\373\001\001" +
    "\000\044\010\045\012\367\013\365\020\375\024\351\025" +
    "\370\026\361\031\352\032\362\033\356\034\357\043\u0106" +
    "\053\350\054\374\055\372\056\354\057\373\001\001\000" +
    "\002\001\001\000\006\015\u012c\024\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\060\u0130\061\u012f\001" +
    "\001\000\002\001\001\000\004\061\u0137\001\001\000\004" +
    "\035\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\010\045\012\367\013\365\020\375" +
    "\024\351\025\370\026\361\031\352\032\362\033\356\034" +
    "\357\042\u0136\043\364\053\350\054\374\055\372\056\354" +
    "\057\373\001\001\000\044\010\045\012\367\013\365\020" +
    "\375\024\351\025\370\026\361\031\352\032\362\033\356" +
    "\034\357\043\u0106\053\350\054\374\055\372\056\354\057" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\010\045\012\367\013\365\020\375\024" +
    "\351\025\370\026\361\031\352\032\362\033\356\034\357" +
    "\042\u013b\043\364\053\350\054\374\055\372\056\354\057" +
    "\373\001\001\000\044\010\045\012\367\013\365\020\375" +
    "\024\351\025\370\026\361\031\352\032\362\033\356\034" +
    "\357\043\u0106\053\350\054\374\055\372\056\354\057\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\010\045\012\367\013\365\020\375\024\351" +
    "\025\370\026\361\031\352\032\362\033\356\034\357\042" +
    "\u0140\043\364\053\350\054\374\055\372\056\354\057\373" +
    "\001\001\000\044\010\045\012\367\013\365\020\375\024" +
    "\351\025\370\026\361\031\352\032\362\033\356\034\357" +
    "\043\u0106\053\350\054\374\055\372\056\354\057\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<ErrorT> lista_errores;
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


//public Nodo raiz;

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FMIENTRAS_QUE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FHASTA_QUE",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    asig.columna=asigleft+1;
                    asig.linea=asigright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    inc.columna=incleft+1;
                    inc.linea=incright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FPARA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FVALOR ::= tokValor TIPODATO tokDosp FSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALOR",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FVALORES ::= FVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.columna=valorleft+1;
                    aux.linea=valorright+1;
                    aux.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FVALORES ::= FVALORES FVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    valor.columna=valorleft+1;
                    valor.linea=valorright+1;
                    valores.add(valor); 
                    RESULT = valores; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FVALORES",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokNoCumple tokDosp FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCAMBIAR_A",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla tokEsFalso tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sents2.columna=sents2left+1;
                    sents2.linea=sents2right+1;
                    aux.add(exp);
                    aux.add(sents);
                    aux.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FES_VERDADERO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MMIENTRAS_QUE ::= tokMientrasQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MMIENTRAS_QUE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MHASTA_QUE ::= tokHastaQue tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("HASTA_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MHASTA_QUE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MPARA ::= tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("PARA");
                    asig.columna=asigleft+1;
                    asig.linea=asigright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    inc.columna=incleft+1;
                    inc.linea=incright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MPARA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MVALOR ::= tokValor EXP tokDosp MSENTS 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALOR");
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALOR",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MVALORES ::= MVALOR 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("VALORES");
                    aux.columna=valorleft+1;
                    aux.linea=valorright+1;
                    aux.add(valor);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MVALORES ::= MVALORES MVALOR 
            {
              Nodo RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    valor.columna=valorleft+1;
                    valor.linea=valorright+1;
                    valores.add(valor); 
                    RESULT = valores; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MVALORES",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokNoCumple tokDosp MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MCAMBIAR_A ::= tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo valores = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MCAMBIAR_A",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla tokEsFalso tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sents2.columna=sents2left+1;
                    sents2.linea=sents2right+1;
                    aux.add(exp);
                    aux.add(sents);
                    aux.add(sents2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MES_VERDADERO ::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES_VERDADERO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DIBUJAR_TS ::= tokDibujarTS tokApar tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_TS");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_TS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DIBUJAR_EXP ::= tokDibujarExp tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_EXP");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_EXP",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DIBUJAR_AST ::= tokDibujarAST tokApar tokId tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("DIBUJAR_AST");
                    Nodo aux1=new Nodo(id);
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    aux.add(aux1);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIBUJAR_AST",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MOSTRAR ::= tokMostrar tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("MOSTRAR");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INCRE_DECRE ::= tokMenosMenos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("--");aux.columna=aleft+1; aux.linea=aright+1; RESULT =aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INCRE_DECRE ::= tokMasMas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("++");aux.columna=aleft+1; aux.linea=aright+1; RESULT =aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIG_PARA ::= tokDecimal tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIG_PARA");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(new Nodo("DECIMAL"));
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIG_PARA ::= tokEntero tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIG_PARA");
                    Nodo aux1= new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(new Nodo("ENTERO"));
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPODATO ::= tokString 
            {
              Nodo RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    string=string.replaceAll("\"","");
                    Nodo aux=new Nodo(string);
                    aux.columna=stringleft+1;
                    aux.linea=stringright+1;
                    RESULT = new Nodo(string);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPODATO ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    Nodo aux=new Nodo(num);
                    aux.columna=numleft+1;
                    aux.linea=numright+1;
                    RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROIN ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    //Nodo aux = new Nodo("PARAMETROIN");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    //aux.add(exp);
                    RESULT =exp;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROIN",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROSIN ::= PARAMETROIN 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROSIN");
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    aux.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMETROSIN ::= PARAMETROSIN tokComa PARAMETROIN 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    pars.columna=parsleft+1;
                    pars.linea=parsright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    pars.add(par); 
                    RESULT = pars; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSIN",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LLAMAR ::= tokId tokApar tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo aux  = new Nodo("LLAMAR");
                    Nodo aux1 = new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    aux.add(aux1);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAMAR ::= tokId tokApar PARAMETROSIN tokCpar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parinleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parinright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo parin = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("LLAMAR");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    parin.columna=parinleft+1;
                    parin.linea=parinright+1;
                    aux.add(aux1);
                    aux.add(parin);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETRO ::= TIPO tokId 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("PARAMETRO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROS ::= PARAMETRO 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("PARAMETROS");
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    aux.add(par);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS ::= PARAMETROS tokComa PARAMETRO 
            {
              Nodo RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo pars = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    pars.columna=parsleft+1;
                    pars.linea=parsright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1; 
                    pars.add(par); RESULT = pars; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // METODO ::= tokVacio tokId tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(new Nodo("VACIO"));
                    aux.add(aux1);
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // METODO ::= tokVacio tokId tokApar PARAMETROS tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("METODO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(new Nodo("VACIO"));
                    aux.add(aux1);
                    aux.add(par);
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCION ::= TIPO tokId tokApar tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    Nodo aux1=new Nodo(id);
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    aux.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCION ::= TIPO tokId tokApar PARAMETROS tokCpar tokAlla FSENTS tokClla 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("FUNCION");
                    Nodo aux1=new Nodo(id);
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    aux.add(par);
                    aux.add(fsents);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTINUAR ::= tokContinuar tokPcoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("CONTINUAR"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ROMPER ::= tokRomper tokPcoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("ROMPER"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ROMPER",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MRETORNO ::= tokRetorno tokPcoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("RETORNO"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MRETORNO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FRETORNO ::= tokRetorno EXP tokPcoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux = new Nodo("RETORNO");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FRETORNO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PRINCIPAL ::= tokVacio tokPrincipal tokApar tokCpar tokAlla MSENTS tokClla 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux=new Nodo("PRINCIPAL");
                    aux.add(new Nodo("VACIO"));
                    aux.add(new Nodo("PRINCIPAL"));
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(msents);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= LLAMAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); Nodo aux1=new Nodo("ID"); Nodo aux2=new Nodo(id); aux2.columna=idleft+1; aux2.linea=idright+1; aux1.add(aux2); aux.add(aux1); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= tokFalso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKFALSO"); Nodo fal=new Nodo(falso); fal.columna=falsoleft+1; fal.linea=falsoright+1; tok.add(fal); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= tokVerdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKVERDADERO"); Nodo ver=new Nodo(verdadero); ver.columna=verdaderoleft+1; ver.linea=verdaderoright+1; tok.add(ver); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); Nodo aux1=new Nodo("-"); aux1.columna=aleft+1; aux1.linea=aright+1; aux.add(aux1); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= tokString 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo exp=new Nodo("EXP"); Nodo str=new Nodo("TOKSTRING"); String aux=cadena; aux=aux.replaceAll("\"",""); Nodo cad=new Nodo(aux); cad.columna=cadenaleft+1; cad.linea=cadenaright+1; str.add(cad); exp.add(str); RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= tokNumero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKNUMERO"); Nodo aux2=new Nodo(num); aux2.columna=numleft+1; aux2.linea=numright+1; tok.add(aux2); aux.add(tok); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= tokApar EXP tokCpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP tokMenor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("<")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP tokMayor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo(">")); aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP tokMenorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("<="));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP tokMayorIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo(">="));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP tokDiferente EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("!="));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP tokIgualIgual EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("=="));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= tokNot EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); aux.add(new Nodo("!")); a.columna=aleft+1; a.linea=aright+1; aux.add(a); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP tokAnd EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("&&"));   aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP tokOr EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("||"));   aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP tokPotencia EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("^"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP tokModulo EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("%"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP tokDiv EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("/"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP tokPor EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("*"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP tokMenos EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("-"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP tokMas EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("+"));  aux.add(b); RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= tokId tokIgual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("ASIGNACION");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= TIPO LID tokIgual EXP 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    exp.columna=expleft+1;
                    exp.linea=expright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    aux.add(exp);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= TIPO LID 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    RESULT = aux;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LID ::= tokId 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("LISTA ID");
                    Nodo aux2= new Nodo(id);
                    aux2.columna=idleft +1;
                    aux2.linea=idright +1;
                    aux.add(aux2);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LID ::= LID tokComa tokId 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 lid.columna=lidleft+1; lid.linea=lidright+1;
                    Nodo aux=new Nodo(id);
                    aux.columna=idleft+1;
                    aux.linea=idright+1;
                    lid.add(aux); 
                    RESULT = lid; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= tokEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("ENTERO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= tokTexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("TEXTO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tokBooleano 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("BOOLEANO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tokDecimal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo aux=new Nodo("DECIMAL"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FSENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FSENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FSENT ::= FRETORNO 
            {
              Nodo RESULT =null;
		int fretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FSENT ::= FMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FSENT ::= FHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FSENT ::= FPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FSENT ::= FCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FSENT ::= FES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FSENT ::= LLAMAR tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENT",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FSENTS ::= FSENT 
            {
              Nodo RESULT =null;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux=new Nodo("SENTS");
                    aux.columna=fsentleft+1;
                    aux.linea=fsentright+1;
                    aux.add(fsent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FSENTS ::= FSENTS FSENT 
            {
              Nodo RESULT =null;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo fsents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fsentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fsentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo fsent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    fsent.columna=fsentleft+1;
                    fsent.linea=fsentright+1;
                    fsents.add(fsent); RESULT = fsents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FSENTS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MSENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MSENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MSENT ::= DIBUJAR_TS tokPcoma 
            {
              Nodo RESULT =null;
		int dibTSleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibTSright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibTS = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibTS; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MSENT ::= DIBUJAR_EXP tokPcoma 
            {
              Nodo RESULT =null;
		int dibEXPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibEXPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibEXP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibEXP; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MSENT ::= DIBUJAR_AST tokPcoma 
            {
              Nodo RESULT =null;
		int dibASTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dibASTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dibAST = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dibAST; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MSENT ::= MRETORNO 
            {
              Nodo RESULT =null;
		int mretleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mretright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mret = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mret; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MSENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int continuarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int continuarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo continuar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = continuar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MSENT ::= ROMPER 
            {
              Nodo RESULT =null;
		int romperleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int romperright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo romper = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = romper; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MSENT ::= MOSTRAR tokPcoma 
            {
              Nodo RESULT =null;
		int mostrarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mostrarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo mostrar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = mostrar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MSENT ::= MMIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = mientras; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MSENT ::= MHASTA_QUE 
            {
              Nodo RESULT =null;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hasta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = hasta; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MSENT ::= MPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = para; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MSENT ::= MCAMBIAR_A 
            {
              Nodo RESULT =null;
		int cambiarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cambiarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cambiar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cambiar; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MSENT ::= MES_VERDADERO 
            {
              Nodo RESULT =null;
		int esVerdadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esVerdadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo esVerdad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = esVerdad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MSENT ::= LLAMAR tokPcoma 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = llamada; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MSENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MSENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MSENTS ::= MSENT 
            {
              Nodo RESULT =null;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("SENTS");
                    aux.columna=msentleft+1;
                    aux.linea=msentright+1;
                    aux.add(msent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MSENTS ::= MSENTS MSENT 
            {
              Nodo RESULT =null;
		int msentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int msentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo msents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int msentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int msentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo msent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    msent.columna=msentleft+1;
                    msent.linea=msentright+1;
                    msents.add(msent); RESULT = msents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MSENTS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= error tokClla 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= error tokPcoma 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= ENCABEZADO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= FUNCION 
            {
              Nodo RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= METODO 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = metodo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= PRINCIPAL 
            {
              Nodo RESULT =null;
		int princileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int princiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo princi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = princi; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= ASIGNACION tokPcoma 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = asig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= DECLARACION tokPcoma 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTS ::= SENT 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo aux = new Nodo("SENTS");
                    aux.columna=sentleft+1;
                    aux.linea=sentright+1;
                    aux.add(sent);
                    RESULT = aux;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTS ::= SENTS SENT 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sent.columna=sentleft+1;
                    sent.linea=sentright+1;
                    sents.add(sent); RESULT = sents; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINIR ::= tokDefinir tokString 
            {
              Nodo RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String ruta="";
                    ruta=dir;
                    ruta=ruta.replaceAll("\"",""); 
                    Nodo aux=new Nodo(ruta);
                    aux.columna=dirleft+1;
                    aux.linea=dirright+1;
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFINIR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTAR ::= tokImportar tokId tokPunto tokExtension 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    String archivo=" ";
                    archivo=id+".asa";
                    Nodo aux=new Nodo(archivo);
                    aux.columna=idleft+1;
                    aux.linea=idright+1;    
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADO ::= DEFINIR tokPcoma 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("DEFINIR");
                    def.columna=defleft+1;
                    def.linea=defright+1;
                    aux.add(def);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADO ::= IMPORTAR tokPcoma 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo imp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo aux =new Nodo("IMPORTAR");
                    imp.columna=impleft+1;
                    imp.linea=impright+1;
                    aux.add(imp);
                    RESULT = aux; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTS 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		this.parser.raiz=sents;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

