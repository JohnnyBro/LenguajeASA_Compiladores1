/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.ErrorT;
import Acciones.Token;

//-------------------> Codigo para el parser, variables, metodos
parser code
{:  
    public ArrayList<ErrorT> lista_errores;
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------------------> Codigo para las acciones gramaticales
action code
{:
:}  


/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
//-------------------> se les puede indicar x tipo
//-------------------> numero es string porque me interesa el valor lexico que trae
terminal String tokImportar, tokDefinir, tokDecimal, tokBooleano, tokTexto, tokEntero, tokCaracter, tokVacio;
terminal String tokRetorno, tokEsVerdadero, tokEsFalso, tokCambiarA, tokNoCumple, tokValor, tokPara;
terminal String tokHastaQue, tokMientrasQue, tokRomper, tokContinuar, tokMostrar, tokDibujarAST, tokDibujarExp;
terminal String tokDibujarTS, tokVerdadero, tokFalso, tokPrincipal, tokOr, tokAnd, tokNot, tokMas, tokMasMas;
terminal String tokMenos, tokMenosMenos, tokPor, tokDiv, tokModulo, tokPotencia, tokIgual, tokIgualIgual;
terminal String tokDiferente, tokMayor, tokMenor, tokMayorIgual, tokMenorIgual, tokApar, tokCpar, tokAlla;
terminal String tokClla, tokPcoma, tokDosp, tokComa, tokPunto, tokExtension;
terminal String tokNumero, tokString, tokChar, tokId;



//-------------------> Declaración de No Terminales
//-------------------> se les puede indicar x tipo
non terminal Nodo INICIO;
non terminal Nodo ENCABEZADOS, ENCABEZADO, SENTS, SENT, IMPORTAR, DEFINIR, EPS, TIPO, PRINCIPAL;
non terminal Nodo DECLARACION, ASIGNACION, LID, EXP, LEXP, METODO, FUNCION;
non terminal Nodo FRETORNO, MRETORNO, PARAMETROS, PARAMETRO, LLAMADA, LLAMAR, ROMPER, CONTINUAR;
non terminal Nodo PARAMETROSIN, PARAMETROIN, MOSTRAR, DIBUJAR_AST, DIBUJAR_EXP, DIBUJAR_TS;
non terminal Nodo ES_VERDADERO, CAMBIAR_A, VALORES, VALOR, TIPODATO, PARA, ASIG_PARA, INCRE_DECRE;
non terminal Nodo HASTA_QUE, MIENTRAS_QUE, MSENTS, MSENT, FSENTS, FSENT;
non terminal Nodo MES_VERDADERO, MCAMBIAR_A, MPARA, MHASTA_QUE, MMIENTRAS_QUE, MVALORES, MVALOR; 
non terminal Nodo FES_VERDADERO, FCAMBIAR_A, FPARA, FHASTA_QUE, FMIENTRAS_QUE, FVALORES, FVALOR;


//-------------------> Indicar precedencia(de menor a mayor) y asociatividad
//-------------------> Generalmente se usa si la gramatica es Ambigua

precedence left tokMas, tokMenos;
precedence left tokPor, tokDiv, tokModulo;
precedence left tokPotencia;
//precedence nonassoc "-()";
precedence nonassoc tokIgualIgual, tokDiferente, tokMayor, tokMenor, tokMayorIgual, tokMenorIgual;
precedence left tokOr;
precedence left tokAnd;
precedence right tokNot;
precedence nonassoc tokApar, tokCpar;    //mientras mas abajo se declare, mayor precedencia


//-------------------> No Terminal inicial
start with INICIO;


/*-------------------------------------------------------------------
--------------------- 3ra. y ultima area: Reglas Sintacticas
-------------------------------------------------------------------*/

INICIO::=       ENCABEZADOS SENTS
                ;

EPS::=
                ;

ENCABEZADOS::= ENCABEZADOS ENCABEZADO
                | ENCABEZADO
                ;

ENCABEZADO::=   IMPORTAR tokPcoma
                | DEFINIR tokPcoma
                ;

IMPORTAR::=     tokImportar tokId tokPunto tokExtension
                ;

DEFINIR::=      tokDefinir tokString
                ;

SENTS::=        SENTS SENT
                | SENT
                ;

//SENTENCIAS GENERALES**************
SENT::=         DECLARACION tokPcoma
                | ASIGNACION tokPcoma
                | PRINCIPAL
                | METODO
                | FUNCION
                | ES_VERDADERO
                | CAMBIAR_A
                | PARA
                | HASTA_QUE
                | MIENTRAS_QUE
                | MOSTRAR tokPcoma
                | LLAMADA tokPcoma
                | ROMPER
                | CONTINUAR
                | FRETORNO
                | MRETORNO
                | DIBUJAR_AST tokPcoma
                | DIBUJAR_EXP tokPcoma
                | DIBUJAR_TS tokPcoma 
                | error tokPcoma
                | error tokClla  
                ;

//SENTENCIAS PARA METODOS (RETORNO NO VA ACOMPANIADO DE EXP)
MSENTS::=        MSENTS MSENT
                | MSENT
                ;

MSENT::=       DECLARACION tokPcoma
                | ASIGNACION tokPcoma
                | LLAMADA tokPcoma
                | MES_VERDADERO
                | MCAMBIAR_A
                | MPARA
                | MHASTA_QUE
                | MMIENTRAS_QUE
                | MOSTRAR tokPcoma
                | ROMPER
                | CONTINUAR
                | MRETORNO
                | DIBUJAR_AST tokPcoma
                | DIBUJAR_EXP tokPcoma
                | DIBUJAR_TS tokPcoma
                | error tokPcoma
                | error tokClla
                ;

// SENTENCIAS PARA FUNCIONES (RETORNO VA A COMPANIADO DE  EXP)
FSENTS::=       FSENTS FSENT
                | FSENT
                ;

FSENT::=       DECLARACION tokPcoma
                | ASIGNACION tokPcoma
                | LLAMADA tokPcoma
                | FES_VERDADERO
                | FCAMBIAR_A
                | FPARA
                | FHASTA_QUE
                | FMIENTRAS_QUE
                | MOSTRAR tokPcoma
                | ROMPER
                | CONTINUAR
                | FRETORNO
                | DIBUJAR_AST tokPcoma
                | DIBUJAR_EXP tokPcoma
                | DIBUJAR_TS tokPcoma
                | error tokPcoma
                | error tokClla
                ;                

TIPO::=         tokDecimal
                | tokBooleano
                | tokTexto
                | tokEntero
                | tokCaracter
                ;

LID::=          LID tokComa tokId
                | tokId
                ;                

DECLARACION::=  TIPO LID
                | TIPO LID tokIgual EXP
                ;

ASIGNACION::=   tokId tokIgual EXP
                ;


EXP::=          EXP tokMas EXP
                | EXP tokMenos EXP
                | EXP tokPor EXP
                | EXP tokDiv EXP
                | EXP tokPotencia EXP
                | EXP tokOr EXP
                | EXP tokAnd EXP
                | tokNot EXP
                | EXP tokIgualIgual EXP
                | EXP tokDiferente EXP
                | EXP tokMayorIgual EXP
                | EXP tokMenorIgual EXP
                | EXP tokMayor EXP
                | EXP tokMenor EXP
                | tokApar EXP tokCpar
                | tokNumero
                | tokModulo
                | tokString
                | tokChar
                | tokMenos EXP
                | tokVerdadero
                | tokFalso
                | tokId
                | LLAMADA
                ;

PRINCIPAL::=    tokVacio tokPrincipal tokApar tokCpar tokAlla SENTS tokClla
                ;

FRETORNO::=     tokRetorno EXP tokPcoma
                ;

MRETORNO::=     tokRetorno tokPcoma
                ;

ROMPER::=       tokRomper tokPcoma
                ;

CONTINUAR::=    tokContinuar tokPcoma
                ;

FUNCION::=      TIPO tokId tokApar PARAMETROS tokCpar tokAlla FSENTS  tokClla
                ;

METODO::=       tokVacio tokId tokApar PARAMETROS tokCpar tokAlla MSENTS tokClla
                ;

PARAMETROS::=   PARAMETROS tokComa PARAMETRO
                | PARAMETRO
                ;

PARAMETRO::=    TIPO tokId
                | EPS
                ;

LLAMADA::=      LLAMADA tokPunto LLAMAR
                | LLAMAR
                ;

LLAMAR::=       tokId tokApar PARAMETROSIN tokCpar
                ;      

PARAMETROSIN::= PARAMETROSIN tokComa PARAMETROIN
                | PARAMETROIN
                ;

PARAMETROIN::=  EXP
                | EPS
                ;

//SENTENCIAS DE CONTROL GENERALES**************************
ES_VERDADERO::= tokEsVerdadero tokApar EXP tokCpar tokAlla SENTS tokClla
                | tokEsVerdadero tokApar EXP tokCpar tokAlla SENTS tokClla tokEsFalso tokAlla SENTS tokClla
                ;

CAMBIAR_A::=    tokCambiarA tokApar EXP tokCpar tokAlla VALORES tokClla
                | tokCambiarA tokApar EXP tokCpar tokAlla VALORES tokNoCumple tokDosp SENTS tokClla
                ;

VALORES::=      VALORES VALOR
                | VALOR
                ;

VALOR::=        tokValor TIPODATO tokDosp SENTS
                ;

TIPODATO::=     tokNumero
                | tokString
                ;

PARA::=         tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla SENTS tokClla
                ;

ASIG_PARA::=    tokEntero tokId tokIgual EXP
                | tokDecimal tokId tokIgual EXP
                ;

INCRE_DECRE::=  tokMasMas
                | tokMenosMenos
                ;

HASTA_QUE::=    tokHastaQue tokApar EXP tokCpar tokAlla SENTS tokClla
                ;

MIENTRAS_QUE::= tokMientrasQue tokApar EXP tokCpar tokAlla SENTS tokClla
                ;

MOSTRAR::=      tokMostrar tokApar LEXP tokCpar
                ;

LEXP::=         LEXP tokComa EXP
                | EXP
                ;

DIBUJAR_AST::=  tokDibujarAST tokApar tokId tokCpar
                ;

DIBUJAR_EXP::=  tokDibujarExp tokApar EXP tokCpar
                ;

DIBUJAR_TS::=   tokDibujarTS tokApar tokCpar
                ;

//SENTENCIAS DE CONTROL PARA METODOS
MES_VERDADERO::= tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla
                | tokEsVerdadero tokApar EXP tokCpar tokAlla MSENTS tokClla tokEsFalso tokAlla MSENTS tokClla
                ;

MCAMBIAR_A::=    tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokClla
                | tokCambiarA tokApar EXP tokCpar tokAlla MVALORES tokNoCumple tokDosp MSENTS tokClla
                ;

MVALORES::=      MVALORES MVALOR
                | MVALOR
                ;

MVALOR::=        tokValor TIPODATO tokDosp MSENTS
                ;

MPARA::=         tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla MSENTS tokClla
                ;

MHASTA_QUE::=    tokHastaQue tokApar EXP tokCpar tokAlla MSENTS tokClla
                ;

MMIENTRAS_QUE::= tokMientrasQue tokApar EXP tokCpar tokAlla MSENTS tokClla
                ;

//SENTENCIAS DE CONTROL PARA FUNCIONES
FES_VERDADERO::= tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla
                | tokEsVerdadero tokApar EXP tokCpar tokAlla FSENTS tokClla tokEsFalso tokAlla FSENTS tokClla
                ;

FCAMBIAR_A::=    tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokClla
                | tokCambiarA tokApar EXP tokCpar tokAlla FVALORES tokNoCumple tokDosp FSENTS tokClla
                ;

FVALORES::=      FVALORES FVALOR
                | FVALOR
                ;

FVALOR::=        tokValor TIPODATO tokDosp FSENTS
                ;

FPARA::=         tokPara tokApar ASIG_PARA tokPcoma EXP tokPcoma INCRE_DECRE tokCpar tokAlla FSENTS tokClla
                ;

FHASTA_QUE::=    tokHastaQue tokApar EXP tokCpar tokAlla FSENTS tokClla
                ;

FMIENTRAS_QUE::= tokMientrasQue tokApar EXP tokCpar tokAlla FSENTS tokClla
                ;