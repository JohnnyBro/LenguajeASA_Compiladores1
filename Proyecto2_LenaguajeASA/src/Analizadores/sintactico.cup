/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.*;
//import Acciones.ErrorT;
//import Acciones.Token;

//-------------------> Codigo para el parser, variables, metodos
parser code
{:  
    public ArrayList<ErrorT> lista_errores;
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------------------> Codigo para las acciones gramaticales
action code
{:
//public Nodo raiz;
:}  


/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
//-------------------> se les puede indicar x tipo
//-------------------> numero es string porque me interesa el valor lexico que trae
terminal String tokImportar, tokDefinir, tokDecimal, tokBooleano, tokTexto, tokEntero, /*tokCaracter,*/ tokVacio;
terminal String tokRetorno, tokEsVerdadero, tokEsFalso, tokCambiarA, tokNoCumple, tokValor, tokPara;
terminal String tokHastaQue, tokMientrasQue, tokRomper, tokContinuar, tokMostrar, tokDibujarAST, tokDibujarExp;
terminal String tokDibujarTS, tokVerdadero, tokFalso, tokPrincipal, tokOr, tokAnd, tokNot, tokMas, tokMasMas;
terminal String tokMenos, tokMenosMenos, tokPor, tokDiv, tokModulo, tokPotencia, tokIgual, tokIgualIgual;
terminal String tokDiferente, tokMayor, tokMenor, tokMayorIgual, tokMenorIgual, tokApar, tokCpar, tokAlla;
terminal String tokClla, tokPcoma, tokDosp, tokComa, tokPunto, tokExtension;
terminal String tokNumero, tokString, /*tokChar,*/ tokId;



//-------------------> Declaración de No Terminales
//-------------------> se les puede indicar x tipo
non terminal Nodo INICIO;
non terminal Nodo ENCABEZADO, SENTS, SENT, IMPORTAR, DEFINIR, TIPO, PRINCIPAL;
non terminal Nodo DECLARACION, ASIGNACION, LID, EXP, METODO, FUNCION;
non terminal Nodo FRETORNO, MRETORNO, PARAMETROS, PARAMETRO, LLAMAR, ROMPER, CONTINUAR;
non terminal Nodo PARAMETROSIN, PARAMETROIN, MOSTRAR, DIBUJAR_AST, DIBUJAR_EXP, DIBUJAR_TS;
non terminal Nodo TIPODATO, ASIG_PARA, INCRE_DECRE;
non terminal Nodo MSENTS, MSENT, FSENTS, FSENT;
non terminal Nodo MES_VERDADERO, MCAMBIAR_A, MPARA, MHASTA_QUE, MMIENTRAS_QUE, MVALORES, MVALOR; 
non terminal Nodo FES_VERDADERO, FCAMBIAR_A, FPARA, FHASTA_QUE, FMIENTRAS_QUE, FVALORES, FVALOR;
//non terminal Nodo ES_VERDADERO, CAMBIAR_A, HASTA_QUE, MIENTRAS_QUE, VALORES, VALOR, PARA;
//non terminal Nodo ENCABEZADOS, LEXP;

//-------------------> Indicar precedencia(de menor a mayor) y asociatividad
//-------------------> Generalmente se usa si la gramatica es Ambigua

precedence left tokMas, tokMenos;
precedence left tokPor, tokDiv, tokModulo;
precedence left tokPotencia;
//precedence nonassoc "-()";
precedence nonassoc tokIgualIgual, tokDiferente, tokMayor, tokMenor, tokMayorIgual, tokMenorIgual;
precedence left tokOr;
precedence left tokAnd;
precedence right tokNot;
precedence nonassoc tokApar, tokCpar;    //mientras mas abajo se declare, mayor precedencia


//-------------------> No Terminal inicial
start with INICIO;


/*-------------------------------------------------------------------
--------------------- 3ra. y ultima area: Reglas Sintacticas
-------------------------------------------------------------------*/

INICIO::=      /* ENCABEZADOS:encs SENTS:sents
                {:
                    Nodo aux=new Nodo("INICIO");
                    aux.add(encs);
                    aux.add(sents);
                    this.parser.raiz=aux;
                    //Graficador g=new Graficador();
                    //g.graficarAST(aux);
                :}*/
                SENTS:sents{:this.parser.raiz=sents;:}
                ;



//ENCABEZADOS::= ENCABEZADOS:encs ENCABEZADO:enc
//                {: encs.add(enc); RESULT=encs; :}
//                | ENCABEZADO:enc
//                {:
//                    Nodo aux = new Nodo("ENCABEZADOS");
//                    aux.add(enc);
//                    RESULT = aux;
//                :}
//                ;

ENCABEZADO::=   IMPORTAR:imp tokPcoma
                {:
                    Nodo aux =new Nodo("IMPORTAR");
                    imp.columna=impleft+1;
                    imp.linea=impright+1;
                    aux.add(imp);
                    RESULT = aux; 
                :}
                | DEFINIR:def tokPcoma
                {:
                    Nodo aux =new Nodo("DEFINIR");
                    def.columna=defleft+1;
                    def.linea=defright+1;
                    aux.add(def);
                    RESULT = aux; 
                :}
                ;

IMPORTAR::=     tokImportar tokId:id tokPunto tokExtension
                {:
                    String archivo=" ";
                    archivo=id+".asa";
                    Nodo aux=new Nodo(archivo);
                    aux.columna=idleft+1;
                    aux.linea=idright+1;    
                    RESULT = aux; 
                :}
                ;

DEFINIR::=      tokDefinir tokString:dir
                {:
                    String ruta="";
                    ruta=dir;
                    ruta=ruta.replaceAll("\"",""); 
                    Nodo aux=new Nodo(ruta);
                    aux.columna=dirleft+1;
                    aux.linea=dirright+1;
                    RESULT = aux; 
                :}
                ;

SENTS::=        SENTS:sents SENT:sent
                {: 
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sent.columna=sentleft+1;
                    sent.linea=sentright+1;
                    sents.add(sent); RESULT = sents; :}
                | SENT:sent
                {:
                    Nodo aux = new Nodo("SENTS");
                    aux.columna=sentleft+1;
                    aux.linea=sentright+1;
                    aux.add(sent);
                    RESULT = aux;
                :}
                ;

//SENTENCIAS GENERALES**************
SENT::=           DECLARACION:dec tokPcoma        {: RESULT = dec; :}
                | ASIGNACION:asig tokPcoma      {: RESULT = asig; :}
                | PRINCIPAL:princi              {: RESULT = princi; :}
                | METODO:metodo                 {: RESULT = metodo; :}
                | FUNCION:funcion               {: RESULT = funcion; :}
                | ENCABEZADO:a                  {: RESULT = a; :}
                //| IMPORTAR:a                    {: RESULT = a; :}
                //| DEFINIR:a                     {: RESULT = a; :}
                //| ES_VERDADERO:esVerdad         {: RESULT = esVerdad; :}
                //| CAMBIAR_A:cambiar             {: RESULT = cambiar; :}
                //| PARA:para                     {: RESULT = para; :}
                //| HASTA_QUE:hasta               {: RESULT = hasta; :}
                //| MIENTRAS_QUE:mientras         {: RESULT = mientras; :}
                //| MOSTRAR:mostrar tokPcoma      {: RESULT = mostrar; :}
                //| LLAMAR:llamada tokPcoma      {: RESULT = llamada; :}
                //| ROMPER:romper                 {: RESULT = romper; :}
                //| CONTINUAR:continuar           {: RESULT = continuar; :}
                //| FRETORNO:fret                 {: RESULT = fret; :}
                //| MRETORNO:mret                 {: RESULT = mret; :}
                //| DIBUJAR_AST:dibAST tokPcoma   {: RESULT = dibAST; :}
                //| DIBUJAR_EXP:dibEXP tokPcoma   {: RESULT = dibEXP; :}
                //| DIBUJAR_TS:dibTS tokPcoma     {: RESULT = dibTS; :}
                | error tokPcoma
                | error tokClla  
                ;

//SENTENCIAS PARA METODOS (RETORNO NO VA ACOMPANIADO DE EXP)
MSENTS::=        MSENTS:msents MSENT:msent
                {: 
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    msent.columna=msentleft+1;
                    msent.linea=msentright+1;
                    msents.add(msent); RESULT = msents; :}
                | MSENT:msent
                {:
                    Nodo aux = new Nodo("SENTS");
                    aux.columna=msentleft+1;
                    aux.linea=msentright+1;
                    aux.add(msent);
                    RESULT = aux;
                :}
                ;

MSENT::=       DECLARACION:dec tokPcoma         {: RESULT = dec; :}
                | ASIGNACION:asig tokPcoma      {: RESULT = asig; :}
                | LLAMAR:llamada tokPcoma      {: RESULT = llamada; :}
                | MES_VERDADERO:esVerdad        {: RESULT = esVerdad; :}
                | MCAMBIAR_A:cambiar            {: RESULT = cambiar; :}
                | MPARA:para                    {: RESULT = para; :}
                | MHASTA_QUE:hasta              {: RESULT = hasta; :}
                | MMIENTRAS_QUE:mientras        {: RESULT = mientras; :}
                | MOSTRAR:mostrar tokPcoma      {: RESULT = mostrar; :}
                | ROMPER:romper                 {: RESULT = romper; :}
                | CONTINUAR:continuar           {: RESULT = continuar; :}
                | MRETORNO:mret                 {: RESULT = mret; :}
                | DIBUJAR_AST:dibAST tokPcoma   {: RESULT = dibAST; :}
                | DIBUJAR_EXP:dibEXP tokPcoma   {: RESULT = dibEXP; :}
                | DIBUJAR_TS:dibTS tokPcoma     {: RESULT = dibTS; :}
                | error tokPcoma
                | error tokClla
                ;

// SENTENCIAS PARA FUNCIONES (RETORNO VA A COMPANIADO DE  EXP)
FSENTS::=       FSENTS:fsents FSENT:fsent
                {: 
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    fsent.columna=fsentleft+1;
                    fsent.linea=fsentright+1;
                    fsents.add(fsent); RESULT = fsents; :}
                | FSENT:fsent
                {:
                    Nodo aux=new Nodo("SENTS");
                    aux.columna=fsentleft+1;
                    aux.linea=fsentright+1;
                    aux.add(fsent);
                    RESULT = aux;
                :}
                ;

FSENT::=          DECLARACION:dec tokPcoma         {: RESULT = dec; :}
                | ASIGNACION:asig tokPcoma      {: RESULT = asig; :}
                | LLAMAR:llamada tokPcoma      {: RESULT = llamada; :}
                | FES_VERDADERO:esVerdad        {: RESULT = esVerdad; :}
                | FCAMBIAR_A:cambiar            {: RESULT = cambiar; :}
                | FPARA:para                    {: RESULT = para; :}
                | FHASTA_QUE:hasta              {: RESULT = hasta; :}
                | FMIENTRAS_QUE:mientras        {: RESULT = mientras; :}
                | MOSTRAR:mostrar tokPcoma      {: RESULT = mostrar; :}
                | ROMPER:romper                 {: RESULT = romper; :}
                | CONTINUAR:continuar           {: RESULT = continuar; :}
                | FRETORNO:fret                 {: RESULT = fret; :}
                | DIBUJAR_AST:dibAST tokPcoma   {: RESULT = dibAST; :}
                | DIBUJAR_EXP:dibEXP tokPcoma   {: RESULT = dibEXP; :}
                | DIBUJAR_TS:dibTS tokPcoma     {: RESULT = dibTS; :}
                | error tokPcoma
                | error tokClla
                ;                

TIPO::=         tokDecimal:a
                {: Nodo aux=new Nodo("DECIMAL"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; :}
                | tokBooleano:a
                {: Nodo aux=new Nodo("BOOLEANO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; :}
                | tokTexto:a
                {: Nodo aux=new Nodo("TEXTO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; :}
                | tokEntero:a
                {: Nodo aux=new Nodo("ENTERO"); aux.columna=aleft+1; aux.linea=aright+1; RESULT = aux; :}
                //| tokCaracter
                //{: RESULT = new Nodo("CARACTER"); :}
                ;

LID::=          LID:lid tokComa tokId:id
                {: lid.columna=lidleft+1; lid.linea=lidright+1;
                    Nodo aux=new Nodo(id);
                    aux.columna=idleft+1;
                    aux.linea=idright+1;
                    lid.add(aux); 
                    RESULT = lid; 
                :}
                | tokId:id
                {:
                    Nodo aux = new Nodo("LISTA ID");
                    Nodo aux2= new Nodo(id);
                    aux2.columna=idleft +1;
                    aux2.linea=idright +1;
                    aux.add(aux2);
                    RESULT = aux;
                :}
                ;                

DECLARACION::=  TIPO:tipo LID:lid
                {: 
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    RESULT = aux;
                 :}
                | TIPO:tipo LID:lid tokIgual EXP:exp
                {:
                    Nodo aux=new Nodo("DECLARACION");
                    tipo.columna=tipoleft +1;
                    tipo.linea=tiporight+1;
                    lid.columna=lidleft+1;
                    lid.linea=lidright +1;
                    exp.columna=expleft+1;
                    exp.linea=expright +1;
                    aux.add(tipo);
                    aux.add(lid);
                    aux.add(exp);
                    RESULT = aux;
                 :}
                ;

ASIGNACION::=   tokId:id tokIgual EXP:exp
                {:
                    Nodo aux = new Nodo("ASIGNACION");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;


EXP::=          EXP:a tokMas:c EXP:b          {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("+")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokMenos:c EXP:b      {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("-")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokPor:c EXP:b        {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("*")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokDiv:c EXP:b        {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("/")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokModulo:c EXP:b     {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("%")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokPotencia:c EXP:b   {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("^")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokOr:c EXP:b         {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("||")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | EXP:a tokAnd:c EXP:b        {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("&&")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | tokNot EXP:a                {: Nodo aux=new Nodo("EXP"); aux.add(new Nodo("!")); a.columna=aleft+1; a.linea=aright+1; aux.add(a); RESULT = aux; :}
                | EXP:a tokIgualIgual EXP:b   {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("==")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | EXP:a tokDiferente EXP:b    {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("!=")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | EXP:a tokMayorIgual EXP:b   {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo(">=")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | EXP:a tokMenorIgual EXP:b   {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("<=")); b.columna=aleft+1; b.linea=aright+1;  aux.add(b); RESULT = aux; :}
                | EXP:a tokMayor EXP:b        {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo(">")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | EXP:a tokMenor EXP:b        {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); aux.add(new Nodo("<")); b.columna=aleft+1; b.linea=aright+1; aux.add(b); RESULT = aux; :}
                | tokApar EXP:a tokCpar       {: Nodo aux=new Nodo("EXP"); a.columna=aleft+1; a.linea=aright+1; aux.add(a); :}
                | tokNumero:num               {: Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKNUMERO"); Nodo aux2=new Nodo(num); aux2.columna=numleft+1; aux2.linea=numright+1; tok.add(aux2); aux.add(tok); RESULT = aux; :}
                | tokString:cadena            {: Nodo exp=new Nodo("EXP"); Nodo str=new Nodo("TOKSTRING"); String aux=cadena; aux=aux.replaceAll("\"",""); Nodo cad=new Nodo(aux); cad.columna=cadenaleft+1; cad.linea=cadenaright+1; str.add(cad); exp.add(str); RESULT = exp; :}
                | tokMenos:a EXP:b            {: Nodo aux=new Nodo("EXP"); Nodo aux1=new Nodo("-"); aux1.columna=aleft+1; aux1.linea=aright+1; aux.add(aux1); aux.add(b); RESULT = aux; :}
                | tokVerdadero:verdadero      {: Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKVERDADERO"); Nodo ver=new Nodo(verdadero); ver.columna=verdaderoleft+1; ver.linea=verdaderoright+1; tok.add(ver); aux.add(tok); RESULT = aux; :}
                | tokFalso:falso              {: Nodo aux=new Nodo("EXP"); Nodo tok=new Nodo("TOKFALSO"); Nodo fal=new Nodo(falso); fal.columna=falsoleft+1; fal.linea=falsoright+1; tok.add(fal); aux.add(tok); RESULT = aux; :}
                | tokId:id                    {: Nodo aux=new Nodo("EXP"); Nodo aux1=new Nodo("ID"); Nodo aux2=new Nodo(id); aux2.columna=idleft+1; aux2.linea=idright+1; aux1.add(aux2); aux.add(aux1); RESULT = aux; :}
                | LLAMAR:a                   {: RESULT=a;:}                   
                ;

PRINCIPAL::=    tokVacio tokPrincipal tokApar tokCpar tokAlla MSENTS:msents tokClla
                {:
                    Nodo aux=new Nodo("PRINCIPAL");
                    aux.add(new Nodo("VACIO"));
                    aux.add(new Nodo("PRINCIPAL"));
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(msents);
                    RESULT = aux;
                :}
                ;

FRETORNO::=     tokRetorno:a EXP:exp tokPcoma
                {:
                    Nodo aux = new Nodo("RETORNO");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;

MRETORNO::=     tokRetorno:a tokPcoma
                {: Nodo aux=new Nodo("RETORNO"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; :}
                ;

ROMPER::=       tokRomper:a tokPcoma
                {: Nodo aux=new Nodo("ROMPER"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; :}
                ;

CONTINUAR::=    tokContinuar:a tokPcoma
                {: Nodo aux=new Nodo("CONTINUAR"); aux.columna=aleft+1; aux.linea=aleft+1; RESULT= aux; :}
                ;

FUNCION::=      TIPO:tipo tokId:id tokApar PARAMETROS:par tokCpar tokAlla FSENTS:fsents  tokClla
                {:
                    Nodo aux = new Nodo("FUNCION");
                    Nodo aux1=new Nodo(id);
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    aux.add(par);
                    aux.add(fsents);
                    RESULT = aux; 
                :}
                | TIPO:tipo tokId:id tokApar tokCpar tokAlla FSENTS:fsents  tokClla
                {:
                    Nodo aux = new Nodo("FUNCION");
                    Nodo aux1=new Nodo(id);
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    fsents.columna=fsentsleft+1;
                    fsents.linea=fsentsright+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    aux.add(fsents);
                    RESULT = aux; 
                :}
                ;

METODO::=       tokVacio tokId:id tokApar PARAMETROS:par tokCpar tokAlla MSENTS:msents tokClla
                {:
                    Nodo aux = new Nodo("METODO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(new Nodo("VACIO"));
                    aux.add(aux1);
                    aux.add(par);
                    aux.add(msents);
                    RESULT = aux;
                :}
                | tokVacio tokId:id tokApar tokCpar tokAlla MSENTS:msents tokClla
                {:
                    Nodo aux = new Nodo("METODO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    msents.columna=msentsleft+1;
                    msents.linea=msentsright+1;
                    aux.add(new Nodo("VACIO"));
                    aux.add(aux1);
                    aux.add(msents);
                    RESULT = aux;
                :}
                ;

PARAMETROS::=   PARAMETROS:pars tokComa PARAMETRO:par
                {: 
                    pars.columna=parsleft+1;
                    pars.linea=parsright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1; 
                    pars.add(par); RESULT = pars; 
                :} 
                | PARAMETRO:par
                {:
                    Nodo aux = new Nodo("PARAMETROS");
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    aux.add(par);
                    RESULT = aux;
                :} 
                ;

PARAMETRO::=    TIPO:tipo tokId:id
                {:
                    Nodo aux=new Nodo("PARAMETRO");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    aux.add(tipo);
                    aux.add(aux1);
                    RESULT = aux;
                :}
                ;

/*LLAMAR::=      LLAMAR:llamada tokPunto LLAMAR:llamar
                {: 
                    llamada.columna=llamadaleft+1;
                    llamada.linea=llamadaright+1;
                    llamar.columna=llamarleft+1;
                    llamar.linea=llamarright+1;
                    llamada.add(llamar); RESULT = llamada; :}
                | LLAMAR:llamar
                {:
                    Nodo aux = new Nodo("LLAMAR");
                    llamar.columna=llamarleft+1;
                    llamar.linea=llamarright+1;
                    aux.add(llamar);
                    RESULT = aux;
                :}
                ;*/



LLAMAR::=       tokId:id tokApar PARAMETROSIN:parin tokCpar
                {:
                    Nodo aux = new Nodo("LLAMAR");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    parin.columna=parinleft+1;
                    parin.linea=parinright+1;
                    aux.add(aux1);
                    aux.add(parin);
                    RESULT = aux;
                :}
                | tokId:id tokApar tokCpar
                {:
                    Nodo aux  = new Nodo("LLAMAR");
                    Nodo aux1 = new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    aux.add(aux1);
                    RESULT = aux;
                :}
                ;      

PARAMETROSIN::= PARAMETROSIN:pars tokComa PARAMETROIN:par 
                {: 
                    pars.columna=parsleft+1;
                    pars.linea=parsright+1;
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    pars.add(par); 
                    RESULT = pars; 
                :}
                | PARAMETROIN:par
                {:
                    Nodo aux = new Nodo("PARAMETROSIN");
                    par.columna=parleft+1;
                    par.linea=parright+1;
                    aux.add(par);
                    RESULT = aux;
                :} 
                ;

PARAMETROIN::=  EXP:exp 
                {:
                    Nodo aux = new Nodo("PARAMETROIN");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;

//SENTENCIAS DE CONTROL GENERALES**************************
//ES_VERDADERO::= tokEsVerdadero tokApar EXP:exp tokCpar tokAlla SENTS:sents tokClla
//                {:
//                    Nodo aux = new Nodo("ES_VERDADERO");
//                    aux.add(exp);
//                    aux.add(sents);
//                    RESULT = aux;
//                :}
//                | tokEsVerdadero tokApar EXP:exp tokCpar tokAlla SENTS:sents tokClla tokEsFalso tokAlla SENTS:sents2 tokClla
//                {:
//                    Nodo aux = new Nodo("ES_VERDADERO");
//                    aux.add(exp);
//                    aux.add(sents);
//                    //aux.add(new Nodo("ES_FALSO"));
//                    aux.add(sents2);
//                    RESULT = aux;
//                :}
//                ;

//CAMBIAR_A::=    tokCambiarA tokApar EXP:exp tokCpar tokAlla VALORES:valores tokClla
//                {:
//                    Nodo aux = new Nodo("CAMBIAR_A");
//                    aux.add(exp);
//                    aux.add(valores);
//                    RESULT = aux; 
//                :}
//                | tokCambiarA tokApar EXP:exp tokCpar tokAlla VALORES:valores tokNoCumple tokDosp SENTS:sents tokClla
//                {:
//                    Nodo aux = new Nodo("CAMBIAR_A");
//                    aux.add(exp);
//                    aux.add(valores);
//                    aux.add(sents);
//                    RESULT = aux;
//                :}
//                ;

//VALORES::=      VALORES:valores VALOR:valor
//                {: valores.add(valor); RESULT = valores; :} 
//                | VALOR:valor
//                {:
//                    Nodo aux = new Nodo("VALORES");
//                    aux.add(valor);
//                    RESULT = aux;
//                :} 
//                ;

//VALOR::=        tokValor TIPODATO:tipo tokDosp SENTS:sents
//                {:
//                    Nodo aux = new Nodo("VALOR");
//                    aux.add(tipo);
//                    aux.add(sents);
//                    RESULT = aux; 
//                :} 
//                ;

TIPODATO::=     tokNumero:num
                {: 
                    Nodo aux=new Nodo(num);
                    aux.columna=numleft+1;
                    aux.linea=numright+1;
                    RESULT = aux; :}
                | tokString:string
                {:
                    string=string.replaceAll("\"","");
                    Nodo aux=new Nodo(string);
                    aux.columna=stringleft+1;
                    aux.linea=stringright+1;
                    RESULT = new Nodo(string);
                :}
                ;

//PARA::=         tokPara tokApar ASIG_PARA:asig tokPcoma EXP:exp tokPcoma INCRE_DECRE:inc tokCpar tokAlla SENTS:sents tokClla
//                {:
//                    Nodo aux = new Nodo("PARA");
//                    aux.add(asig);
//                    aux.add(exp);
//                    aux.add(inc);
//                    aux.add(sents);
//                    RESULT = aux;
//                :}
//                ;

ASIG_PARA::=    tokEntero tokId:id tokIgual EXP:exp
                {:
                    Nodo aux = new Nodo("ASIG_PARA");
                    Nodo aux1= new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(new Nodo("ENTERO"));
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                :}
                | tokDecimal tokId:id tokIgual EXP:exp
                {:
                    Nodo aux = new Nodo("ASIG_PARA");
                    Nodo aux1=new Nodo(id);
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(new Nodo("DECIMAL"));
                    aux.add(aux1);
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;

INCRE_DECRE::=  tokMasMas:a
                {: Nodo aux=new Nodo("++");aux.columna=aleft+1; aux.linea=aright+1; RESULT =aux; :}
                | tokMenosMenos:a
                {: Nodo aux=new Nodo("--");aux.columna=aleft+1; aux.linea=aright+1; RESULT =aux; :}
                ;

//HASTA_QUE::=    tokHastaQue tokApar EXP:exp tokCpar tokAlla SENTS:sents tokClla
//                {:
//                    Nodo aux = new Nodo("HASTA_QUE");
//                    aux.add(exp);
//                    aux.add(sents);
//                    RESULT = aux; 
//                :}
//                ;

//MIENTRAS_QUE::= tokMientrasQue tokApar EXP:exp tokCpar tokAlla SENTS:sents tokClla
//                {:
//                    Nodo aux = new Nodo("MIENTRAS_QUE");
//                    aux.add(exp);
//                    aux.add(sents);
//                    RESULT = aux; 
//                :}
//                ;

MOSTRAR::=      tokMostrar tokApar EXP:exp tokCpar
                {:
                    Nodo aux = new Nodo("MOSTRAR");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;

//LEXP::=         LEXP:lexp tokComa EXP:exp
//                {: lexp.add(exp); RESULT = lexp; :}
//                | EXP:exp
//                {:
//                    Nodo aux = new Nodo("LEXP");
//                    aux.add(exp);
//                    RESULT = aux;
//                :}
//                ;

DIBUJAR_AST::=  tokDibujarAST:a tokApar tokId:id tokCpar
                {:
                    Nodo aux = new Nodo("DIBUJAR_AST");
                    Nodo aux1=new Nodo(id);
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    aux1.columna=idleft+1;
                    aux1.linea=idright+1;
                    aux.add(aux1);
                    RESULT = aux;
                :}
                ;

DIBUJAR_EXP::=  tokDibujarExp:a tokApar EXP:exp tokCpar
                {:
                    Nodo aux = new Nodo("DIBUJAR_EXP");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    aux.add(exp);
                    RESULT = aux;
                :}
                ;

DIBUJAR_TS::=   tokDibujarTS:a tokApar tokCpar
                {:
                    Nodo aux = new Nodo("DIBUJAR_TS");
                    aux.columna=aleft+1;
                    aux.linea=aright+1;
                    RESULT = aux;
                :}
                ;

//SENTENCIAS DE CONTROL PARA METODOS
MES_VERDADERO::= tokEsVerdadero tokApar EXP:exp tokCpar tokAlla MSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                :}
                | tokEsVerdadero tokApar EXP:exp tokCpar tokAlla MSENTS:sents tokClla tokEsFalso tokAlla MSENTS:sents2 tokClla
                {:
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sents2.columna=sents2left+1;
                    sents2.linea=sents2right+1;
                    aux.add(exp);
                    aux.add(sents);
                    aux.add(sents2);
                    RESULT = aux;
                :}
                ;

MCAMBIAR_A::=    tokCambiarA tokApar EXP:exp tokCpar tokAlla MVALORES:valores tokClla
                {:
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                :}
                | tokCambiarA tokApar EXP:exp tokCpar tokAlla MVALORES:valores tokNoCumple tokDosp MSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

MVALORES::=      MVALORES:valores MVALOR:valor
                {: 
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    valor.columna=valorleft+1;
                    valor.linea=valorright+1;
                    valores.add(valor); 
                    RESULT = valores; 
                :}
                | MVALOR:valor
                {:
                    Nodo aux = new Nodo("VALORES");
                    aux.columna=valorleft+1;
                    aux.linea=valorright+1;
                    aux.add(valor);
                    RESULT = aux;
                :}
                ;

MVALOR::=        tokValor EXP:tipo tokDosp MSENTS:sents
                {:
                    Nodo aux = new Nodo("VALOR");
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

MPARA::=         tokPara tokApar ASIG_PARA:asig tokPcoma EXP:exp tokPcoma INCRE_DECRE:inc tokCpar tokAlla MSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("PARA");
                    asig.columna=asigleft+1;
                    asig.linea=asigright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    inc.columna=incleft+1;
                    inc.linea=incright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

MHASTA_QUE::=    tokHastaQue tokApar EXP:exp tokCpar tokAlla MSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("HASTA_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                :}
                ;

MMIENTRAS_QUE::= tokMientrasQue tokApar EXP:exp tokCpar tokAlla MSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                :}
                ;

//SENTENCIAS DE CONTROL PARA FUNCIONES
FES_VERDADERO::= tokEsVerdadero tokApar EXP:exp tokCpar tokAlla FSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux;
                :}
                | tokEsVerdadero tokApar EXP:exp tokCpar tokAlla FSENTS:sents tokClla tokEsFalso tokAlla FSENTS:sents2 tokClla
                {:
                    Nodo aux = new Nodo("ES_VERDADERO");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    sents2.columna=sents2left+1;
                    sents2.linea=sents2right+1;
                    aux.add(exp);
                    aux.add(sents);
                    aux.add(sents2);
                    RESULT = aux;
                :}
                ;

FCAMBIAR_A::=    tokCambiarA tokApar EXP:exp tokCpar tokAlla FVALORES:valores tokClla
                {:
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    aux.add(exp);
                    aux.add(valores);
                    RESULT = aux; 
                :}
                | tokCambiarA tokApar EXP:exp tokCpar tokAlla FVALORES:valores tokNoCumple tokDosp FSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("CAMBIAR_A");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(valores);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

FVALORES::=      FVALORES:valores FVALOR:valor
                {: 
                    valores.columna=valoresleft+1;
                    valores.linea=valoresright+1;
                    valor.columna=valorleft+1;
                    valor.linea=valorright+1;
                    valores.add(valor); 
                    RESULT = valores; 
                :}
                | FVALOR:valor
                {:
                    Nodo aux = new Nodo("VALORES");
                    aux.columna=valorleft+1;
                    aux.linea=valorright+1;
                    aux.add(valor);
                    RESULT = aux;
                :}
                ;

FVALOR::=        tokValor TIPODATO:tipo tokDosp FSENTS:sents
                {:
                    Nodo aux = new Nodo("VALOR");
                    tipo.columna=tipoleft+1;
                    tipo.linea=tiporight+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(tipo);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

FPARA::=         tokPara tokApar ASIG_PARA:asig tokPcoma EXP:exp tokPcoma INCRE_DECRE:inc tokCpar tokAlla FSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("PARA");
                    asig.columna=asigleft+1;
                    asig.linea=asigright+1;
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    inc.columna=incleft+1;
                    inc.linea=incright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(asig);
                    aux.add(exp);
                    aux.add(inc);
                    aux.add(sents);
                    RESULT = aux;
                :}
                ;

FHASTA_QUE::=    tokHastaQue tokApar EXP:exp tokCpar tokAlla FSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("HASTA_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                :}
                ;

FMIENTRAS_QUE::= tokMientrasQue tokApar EXP:exp tokCpar tokAlla FSENTS:sents tokClla
                {:
                    Nodo aux = new Nodo("MIENTRAS_QUE");
                    exp.columna=expleft+1;
                    exp.linea=expright+1;
                    sents.columna=sentsleft+1;
                    sents.linea=sentsright+1;
                    aux.add(exp);
                    aux.add(sents);
                    RESULT = aux; 
                :}
                ;